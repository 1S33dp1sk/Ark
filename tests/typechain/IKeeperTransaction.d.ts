/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeeperTransactionInterface extends ethers.utils.Interface {
  functions: {
    "checkSV(bytes32,uint256)": FunctionFragment;
    "collaterilize(address,uint256,bytes32)": FunctionFragment;
    "gasMarkup()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkSV",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterilize",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gasMarkup", values?: undefined): string;

  decodeFunctionResult(functionFragment: "checkSV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collaterilize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasMarkup", data: BytesLike): Result;

  events: {
    "TransactionAccepted(bytes32)": EventFragment;
    "TransactionClaimed(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransactionAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionClaimed"): EventFragment;
}

export type TransactionAcceptedEvent = TypedEvent<
  [string] & { TransactionReference: string }
>;

export type TransactionClaimedEvent = TypedEvent<
  [string, BigNumber] & { TransactionReference: string; ClaimSize: BigNumber }
>;

export class IKeeperTransaction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeeperTransactionInterface;

  functions: {
    checkSV(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collaterilize(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasMarkup(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  checkSV(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collaterilize(
    arg0: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasMarkup(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkSV(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collaterilize(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gasMarkup(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "TransactionAccepted(bytes32)"(
      TransactionReference?: null
    ): TypedEventFilter<[string], { TransactionReference: string }>;

    TransactionAccepted(
      TransactionReference?: null
    ): TypedEventFilter<[string], { TransactionReference: string }>;

    "TransactionClaimed(bytes32,uint256)"(
      TransactionReference?: null,
      ClaimSize?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { TransactionReference: string; ClaimSize: BigNumber }
    >;

    TransactionClaimed(
      TransactionReference?: null,
      ClaimSize?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { TransactionReference: string; ClaimSize: BigNumber }
    >;
  };

  estimateGas: {
    checkSV(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collaterilize(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasMarkup(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkSV(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collaterilize(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasMarkup(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
