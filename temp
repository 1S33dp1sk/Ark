int __index_apoint() {
	ulong __apoint_size=fsze(__lbb_indexfile);
	uchar __buffer[__apoint_size], *buf=(uchar *)&__buffer; memset(&__buffer, 0, sizeof(__buffer));
	int __tempres=pread(__ixr_fd, __buffer, __apoint_size, 0);
	printf("p-read=%d\n", __tempres);
	ulong _didx;
	char _kaddr[64], _caller[64];
	memset(&_kaddr, 0, sizeof(_kaddr));
	memset(&_caller, 0, sizeof(_caller));
	unpack(buf, __gfmt(__idxr__), &_didx, &_kaddr, &_caller);

	printf("didx : %lu\n", _didx);
	printf("kadr : %s\n", _kaddr);
	printf("call : %s\n", _caller);

	return __tempres;
};


int __apoint_index() {
	char const *caller=__getcaller();
	char const *kaddr=kaddress(caller, __path_sys);

	printf("caller :: %s\n", caller);
	printf("kaddr  :: %s\n", kaddr);
	printf("index @%lu\n", __cindex);

	ulong __irvlen=(str_rwings(caller)+str_rwings(kaddr)+24);
	uchar __irv[__irvlen];memset(&__irv, 0, sizeof(__irv));

	ulong packed_size=pack(__irv, "Q:s:s\n", __cindex, kaddr, caller);
	if(__irvlen<packed_size){
		printf("irv len :: %lu\n", __irvlen);
		printf("packed  :: %lu\n", packed_size);
		#ifdef LOG_ERR
			printf("packed size cannot exceed irv\n");
		#endif
		return -1;
	};

	__irv[packed_size]='\n';
	int __tempres=pwrite(__ixr_fd, __irv, __irvlen, 0);
	return __tempres;
};

