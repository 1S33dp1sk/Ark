/// the indexer \\\


#ifndef __IXR__H
#include "ixr.h"
#endif


#ifndef __ixr_name
	#define __ixr_name "indexer"

	ulong __fsize(char *fpath){
	    struct stat __;
	    memset(&__,0,sizeof(struct stat));
	    if(stat(fpath,&__)!=0){return 0;}
	    return __.st_size;
	}

	ulong __iosize(char *fpath){
	    struct stat __;
	    memset(&__,0,sizeof(struct stat));
	    if(stat(fpath,&__)!=0){return 0;}
	    return __.st_blksize;
	}

	uns __dmode(char *fpath){
	    struct stat __;
	    memset(&__,0,sizeof(struct stat));
	    if(stat(fpath,&__)!=0){return 0;}
	    return __.st_mode;
	}

	void *__statusof(char const *__file, struct stat *__) {
		memset(__,0,sizeof(struct stat));
		if(stat(__file,__)==0){
			return __;
		}
		return NULL;
	}

	int __stres(char const*cpath){
		return access(cpath,F_OK)==0;
	}

	ulong __file_r(char*cpath){
	    if (access(cpath,R_OK)==0){
	        return 1;
	    }
	    return 0;
	}

	ulong __file_w(char*cpath){
	    if (access(cpath,W_OK)==0){
	        return 2; 
	    }
	    return 0;
	}

	ulong __file_x(char*cpath){
	    if (access(cpath,X_OK)==0){
	        return fsze(cpath);
	    }
	    return 0;
	}

	uns __8sz(uns _){
	    uns __=1;while(_>0){__*=8;_--;}
	    return __;
	}

#endif