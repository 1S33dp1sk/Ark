#!/bin/bash


#constants
#
# define the base for the aether after INIT()
AETHER_BASE=$(pwd)/Aether
# define the base dir vars
BASE_CONF=$(pwd)/.conf
BASE_PACKAGE=$(pwd)/packages
BASE_TEMPLATE_ENV=$(pwd)/template-env.conf
BASE_TEMPLATE_RPC=$(pwd)/template-rpc.conf
# define package params
PACKAGE_CONF=${BASE_PACKAGE}/conf
PACKAGE_NODE=${BASE_PACKAGE}/node
PACKAGE_PARSERS=${BASE_PACKAGE}/parsers
# define the node params
A_BIN=${AETHER_BASE}/bin
A_NODES=${AETHER_BASE}/nodes
A_CONF=${AETHER_BASE}/.conf
A_LOGS=${AETHER_BASE}/logs
# define the current aether action
MAIN_FLAG=$1
# define colors for a cool ux
NC='\033[0m'
VIOLET='\033[1;94m'
EVIOLET='\033[1;35m'
AVIOLET='\033[1;36m'
GREY='\033[1;37m'
DARK_GREY='\033[0;37m'
GREEN='\033[1;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'


#functions
#
# Display Help
Help() {
    printf "The ${VIOLET}Aether${NC} Connection, simply ${VIOLET}0xAether${NC}|${VIOLET}0xA${NC} \n"
    printf "Syntax: run a command [${VIOLET}aether${NC} <${GREY}command${NC}> ${EVIOLET}-option(s)${NC} ]\n"
    printf "Command(s) avaliable :\n"

    printf "\n${GREY}init${NC} :"
    printf "\n\t Syntax : aether init -s"
    printf "\n\t Description : initiates aether from the original package. used in MAKEFILE."

    printf "\n${GREY}setup${NC} :"
    printf "\n\t Syntax : aether setup -e template-env.conf -r template-rpc.conf"
    printf "\n\t Description : creates a new default configration for node(s)."

    printf "\n${GREY}add${NC} :"
    printf "\n\t Syntax : aether add -a NODE_ADDR"
    printf "\n\t Description : initiates a fresh node with a new node name for the address provided"

    printf "\n${GREY}remove${NC} :"
    printf "\n\t Syntax : aether remove -n NODE_NAME"
    printf "\n\t Description : removes the node files and directories"

    printf "\n${GREY}run${NC}|${GREY}stop${NC} :"
    printf "\n\t Syntax : aether run -n NODE_NAME"
    printf "\n\t Description : toggles the node state, will switch regardless of initial state"

    printf "\n${GREY}log${NC} :" 
    printf "\n\t Syntax : aether log -t LOG_TYPE"
    printf "\n\t Description : writes to stdout the output of LOG_TYPE.\n p|PERFORMANCE , t|TRANSACTIONS , o|ONLINE"

    printf "\n${GREY}log-tail${NC} :" 
    printf "\n\t Syntax : aether log-tail"
    printf "\n\t Description : writes to stdout the last 5 lines of PERFORMANCE|TRANSACTIONS|ONLINE logs"

    printf "\n${GREY}status${NC} :"
    printf "\n\t Syntax : aether status -n NODE_NAME"
    printf "\n\t Description : query the status for the node name specified"

    printf "\n${GREY}purge${NC} :"
    printf "\n\t Syntax : aether purge"
    printf "\n\t Description : removes all current Aether setups & nodes"

    printf "\n${GREY}help${NC} :"
    printf "\n\t Syntax : aether help"
    printf "\n\t Description : display this help screen"

    printf "\n\nOption(s) avaliable :\n\n"

    printf -- "${EVIOLET}-e${NC}\t( env|iroment ) -> Specify an Aether router address , and caller key in \`template-env.conf\`\n"
    printf -- "${EVIOLET}-r${NC}\t( json|RPC ) -> Specify the WSS endpoints for the blockchains supported in \`template-rpc.conf\`\n"
    printf -- "${EVIOLET}-n${NC}\t( name ) -> Specify the 8 hex-digit node name\n"
    printf -- "${EVIOLET}-a${NC}\t( address ) -> Specify the Node Address. ECDSA publickey \n\t\`aether add -a 0xANodeAddress.. \`\n"
    printf -- "${EVIOLET}-t${NC}\t( type|LOG ) -> Specify the LOG TYPE : p|PERFORMANCE , t|TRANSACTIONS , o|ONLINE \n"
    printf -- "${EVIOLET}-l${NC}\t( logging : -> false,true for quiet logging \n"
    printf -- "${EVIOLET}-i${NC}\t( interactive ) -> for shell prompt.\n "
}
# check before initializing
PRE_INIT(){
   # startup flag must be set
    if [ ! "$START_FLG" ]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Startup flag must be set when initializing${NC}.\n"
        exit
    fi
    # path to env file is set
    if [ ! -d "${AETHER_BASE}" ]; then
        INIT
    else 
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Target cannot be null or space${NC}.\n"
    fi
}
# Initialize everything aether
INIT() {
    printf "${VIOLET}Aether${NC} -> ${GREY}INIT${NC}.\n"    
    printf "${VIOLET}Aether${NC} :: ${EVIOLET}BASE PATH${NC} : ${AETHER_BASE}.\n"
    mkdir -p ${AETHER_BASE}/{nodes,logs,bin,.conf}
    # Create tranasction logging
    touch ${A_LOGS}/{online,transactions,performance}.log
    # Start creating packages
    cp ${BASE_PACKAGE}/apy3wrapper ${A_BIN}/
    cp -r ${PACKAGE_NODE}/* ${A_BIN}/
    cp ${PACKAGE_CONF}/* ${A_CONF}/
    # mv ${A_CONF}/env.conf ${A_CONF}/node.default.conf
    # add execution permissions to all files in bin
    chmod u+x ${A_BIN}/*
    # INFO.logging
    printf "${VIOLET}Aether${NC} :: ${EVIOLET}BASE CONTEXT${NC} : < ${GREEN}Enviroment${NC}, ${GREEN}Nodes${NC}, ${GREEN}Packages${NC} >\n"
    # create a hidden default configration directory
    mkdir -p ${A_NODES}/DEFAULT.node/.conf/
    cp ${AETHER_BASE}/.conf/* ${A_NODES}/DEFAULT.node/.conf/
    # create a default node with no params
    touch ${A_NODES}/DEFAULT.node/__main__
    cat ${A_BIN}/__main__ >> ${A_NODES}/DEFAULT.node/__main__
    chmod u+x ${A_NODES}/DEFAULT.node/__main__
    # INFO.logging
    printf "${VIOLET}Aether${NC} :: ${EVIOLET}DEFAULT ENVIROMENT${NC} : < ${GREEN}\`template-env.conf\`${NC}, ${GREEN}\`template-rpc.conf\`${NC} > -> ${GREY}Update for custom node configurations${NC}.\n"
}
# purge nodes and remove everything aether
PURGE() {
    if [ -d ${AETHER_BASE} ] ; then
        rm -rf ${AETHER_BASE}
        rm aether
        printf "${VIOLET}Aether${NC} -> ${GREY}Purged aether setup${NC} \n"
    else
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}No configration files found${NC}.\n"
        exit
    fi
}
# update everything aether
UPDATE() {
    # curl constants.json['PACKAGE_CONTROL'] --output aether-node.zip --silent
    # unzip aether-node.zip
    # make
    # printf "updated.."
    continue
}
# configuration file manipulation
CONFIG() {
    if [[ -z "$NODENAME" ]] || [[ ! -d ${A_NODES}/${NODENAME}.node ]] || [[ ! -f ${A_NODES}/${NODENAME}.node/.conf/config.json ]]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Node config files do not exist.${NC}\n"
    else
        printf "${VIOLET}Aether${NC} : ${EVIOLET}${NODENAME}${NC} :: ENV : ${GREY}Configuration file${NC} ->\n"
        cat ${A_NODES}/${NODENAME}.node/.conf/env.conf.json
        printf "\n\n"
        printf "${VIOLET}Aether${NC} : ${EVIOLET}${NODENAME}${NC} :: RPC : ${GREY}Configuration file${NC} ->\n"
        cat ${A_NODES}/${NODENAME}.node/.conf/rpc.conf.json
    fi        
}
# check configuration files
CONF_FILES() {
    if [ -f "${BASE_CONF}/ABIS.json" ] && [ -f "${BASE_CONF}/rpc.conf" ] && [ -f "${BASE_CONF}/constants.json" ] && [ -f "${BASE_CONF}/node.default.conf" ]; then
        continue
    else
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Missing files${NC}\n"
    fi
}
# check configuration vars
CHECK_CONF() {
    SUP_CHAINS=()
    if [[ -z "$NODE_ADDRESS" ]] || [[ "$NODE_ADDRESS" == " " ]]; then
        NODE_ADDRESS="0x0000000000000000000000000000000000000000"
        printf "${VIOLET}Aether${NC} :: ${YELLOW}WARNING${NC} -> ${GREY}Empty Node Public Address${NC}.\n"
        # should check if node address is registered
    fi
    if [[ ! -z "$NODE_OWNER_PVT" ]] && [[ "$NODE_OWNER_PVT" != " " ]]; then
        # sign transaction to make sure it's correct 
        # i.e:  the pvt key + pub key combo
        if [[ ! -z "$ETH_RPC" ]] && [[ "$ETH_RPC" != " " ]]; then
            SUP_CHAINS+=("1")
        fi
        if [[ ! -z "$BNB_RPC" ]] && [[ "$BNB_RPC" != " " ]]; then
            SUP_CHAINS+=("56")
        fi
        if [[ ! -z "$MATIC_RPC" ]] && [[ "$MATIC_RPC" != " " ]]; then
            SUP_CHAINS+=("137")
        fi
        if [[ ! -z "$FTM_RPC" ]] && [[ "$FTM_RPC" != " " ]]; then
            SUP_CHAINS+=("250")
        fi
        if [[ ! -z "$AVAX_RPC" ]] && [[ "$AVAX_RPC" != " " ]]; then
            SUP_CHAINS+=("43114")
        fi
        if [[ ! -z "$TN1_RPC" ]] && [[ "$TN1_RPC" != " " ]]; then
            SUP_CHAINS+=("1234")
        fi
        if [[ ! -z "$TN4_RPC" ]] && [[ "$TN4_RPC" != " " ]]; then
            SUP_CHAINS+=("4321")
        fi
    else
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Cannot Aether Without Private Key${NC}.\n"
        exit
    fi
}
# create JSON files for the supplied env&rpc
JSONIFY_ENV() {
    cmd="${A_BIN}/parser ${envrmnt}"
    eval "${cmd}" &>/dev/null & disown;
    mv ${envrmnt}.json ${A_CONF}/env.conf.json

    cmd="${A_BIN}/parser ${rpc_envrmnt}"
    eval "${cmd}" &>/dev/null & disown;
    mv ${rpc_envrmnt}.json ${A_CONF}/rpc.conf.json

    python3 ${A_BIN}/node_config.py ${A_CONF}

    MIGRATE_CONFIG
}
# move the configuration files to the default node
MIGRATE_CONFIG() {
    cp -r ${A_CONF}/* ${A_NODES}/DEFAULT.node/.conf
    if [[ ! -f ${A_CONF}/config.json ]]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Instantiating configurations for default node${NC}.\n"
    else
        printf "${VIOLET}Aether${NC} :: ${GREEN}COMPLETED${NC} -> ${GREY}Instantiating configurations for default node${NC}.\n"
    fi
}
# check enviroment files
SETP_ENV() {
    if [[ -z "$envrmnt" ]] && [[ -z "$rpc_envrmnt" ]]; then
        printf "${VIOLET}Aether${NC} :: ${YELLOW}WARNING${NC} -> ${GREY}Setting up node with template configration files${NC}.\n"
        envrmnt=${BASE_TEMPLATE_ENV}
        rpc_envrmnt=${BASE_TEMPLATE_RPC}
    fi
    if [[ -f "$envrmnt" ]] ; then
        if [[ -f "$rpc_envrmnt" ]]; then
            PARSE_ENV
            if [ $ENV_PARSED ]; then
                CHECK_CONF
                if [ ${#SUP_CHAINS[@]} = 0 ]; then
                    printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Need to support atleast 1 or more chainIds${NC}.\n"
                    exit
                fi
                printf "${VIOLET}Aether${NC} :: ${EVIOLET}ENV${NC} : ${envrmnt}.\n"
                printf "${VIOLET}Aether${NC} :: ${EVIOLET}RPC${NC} : ${rpc_envrmnt}.\n"
                JSONIFY_ENV
            else
                printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Unable to parse configuration files${NC}.\n"
            fi
        else
            printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}RPC Enviroment not set${NC}.\n"
            printf "${VIOLET}Aether${NC} -> ${GREY}run same command with -r /path/to/rpc.conf\n"
            exit
        fi
    else
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Enviroment file not set.${NC}.\n"
        printf "${VIOLET}Aether${NC} -> ${GREY}run same command with -e /path/to/env.conf${NC}\n"
        exit
    fi
}
# interactive shell for getting configuration vars
SHELL_CONFIG() {
    # should start displaying shell outcome for inputs using 
    printf "${VIOLET}Aether${NC} :: Interactive Configuration.\n";

    ## 1. Node address
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}Node Address${NC} :: " NODE_ADDRESS
    ## 2. Owner private key
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}Node Owner Private Key${NC} :: " NODE_OWNER_PVT
    ## 3. SUPPORTED CHAINS
    printf "${VIOLET}Aether${NC} -> ${GREY}Leaving any RPC empty means that node does not support that chainId${NC}.\n"
    ## 4.1 ETHEREUM RPC
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}Ethereum RPC${NC} :: " ETH_RPC
    ## 4.2 BINANCE RPC
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}BINANCE RPC${NC} :: " BNB_RPC
    ## 4.3 POLYGON RPC
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}POLYGON RPC${NC} :: " MATIC_RPC
    ## 4.4 FANTOM RPC
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}FANTOM RPC${NC} :: " FTM_RPC
    ## 4.5 AVALANCE RPC
    read -p "${VIOLET}Aether${NC} :: ${EVIOLET}AVALANCE RPC${NC} :: " AVAX_RPC
}
# parse enivroment files
PARSE_ENV() {
    ENV_PARSED=false
    NODE_OWNER_PVT=$(${A_BIN}/reader CONFRD CALLER_PVTKEY -p ${envrmnt})
    ETH_RPC=$(${A_BIN}/reader CONFRD ETHEREUM -p ${rpc_envrmnt})
    BNB_RPC=$(${A_BIN}/reader CONFRD BINANCE -p ${rpc_envrmnt})
    MATIC_RPC=$(${A_BIN}/reader CONFRD POLYGON -p ${rpc_envrmnt})
    FTM_RPC=$(${A_BIN}/reader CONFRD FANTOM -p ${rpc_envrmnt})
    AVAX_RPC=$(${A_BIN}/reader CONFRD AVALANCE -p ${rpc_envrmnt})
    TN1_RPC=$(${A_BIN}/reader CONFRD Testnet1 -p ${rpc_envrmnt})
    TN4_RPC=$(${A_BIN}/reader CONFRD Testnet4 -p ${rpc_envrmnt})
    ENV_PARSED=true
}
# list all available nodes
LST_NODES() {
    dirs=(${A_NODES}/*/)
    for s in "${dirs[@]}"
    do
        NODENAME=$(basename "$s" .node)
        if [ "$NODENAME" != "DEFAULT" ]; then
            STATUS
        else
            continue
        fi
    done
}
# get the current status of a node
STATUS() {
    if [[ -z ${NODENAME} ]]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Node name not specified${NC}.\n"
        exit
    elif [[ ! -d ${A_NODES}/${NODENAME}.node/ ]]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}No such node${NC}.\n"
        exit        
    else
        NODESTATUS=".OFFLINE"
        PVAR=$(pgrep -f __${NODENAME}__)
        NODESTATUS=$(cat ${AETHER_BASE}/nodes/${NODENAME}.node/.cache)
        if [[ "$NODESTATUS" == ".OFFLINE" ]] || [[ -z "$PVAR" ]]; then
            printf ".OFFLINE" > ${A_NODES}/${NODENAME}.node/.cache
            printf "${VIOLET}Aether${NC} :: ${EVIOLET}$NODENAME${NC} : ${GREY}${NODESTATUS//.}${NC}\n"
        else
            printf ".ONLINE" > ${A_NODES}/${NODENAME}.node/.cache
            printf "${VIOLET}Aether${NC} :: ${EVIOLET}$NODENAME${NC} : ${GREEN}${NODESTATUS//.}${NC}\n"
        fi
    fi
}
# check if node name exists
CHK_NODENAME() {
    if [[ ! -z "$NODENAME" ]] && [[ "$NODENAME" != " " ]]; then
        if [[ ! -d ${AETHER_BASE}/nodes/${NODENAME}.node ]]; then
            NODE_EXISTS=false
        else
            NODE_EXISTS=true
        fi
    fi
}
# create a new node name
CRT_NODE() {
    if [ ! -f "${A_CONF}/config.json" ]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}No default configration found${NC}.\n"
        exit
    fi
    # for node_dir in ${A_NODES}/ ; do
    #     [ -L "${node_dir%/}" ] && continue
    #     NODEADDRESS=$(${A_BIN}/reader ${A_NODES}/${node_dir}/.conf/env.conf.json)
    # done
    NODE_EXISTS=true
    while ${NODE_EXISTS}; do
        NODENAME=$(python3 ${A_BIN}/node_name.py | head -n 1 )
        if [ ! -d ${AETHER_BASE}/nodes/${NODENAME}.node ]; then
            NODE_EXISTS=false
        fi
    done
    INIT_NODE
}
# initialize a new node 
INIT_NODE() {
    mkdir ${A_NODES}/${NODENAME}.node
    cp -r ${A_NODES}/DEFAULT.node/* ${A_NODES}/${NODENAME}.node
    cp -r ${A_NODES}/DEFAULT.node/.conf ${A_NODES}/${NODENAME}.node
    mv ${A_NODES}/${NODENAME}.node/__main__ ${A_NODES}/${NODENAME}.node/__${NODENAME}__
    if [[ ! -z "${AETHER_NODE_ADDR}" ]] && [[ "${AETHER_NODE_ADDR}" != " " ]]; then
        ${A_BIN}/gpy3 ${A_BIN}/NodeConfig.py ${A_NODES}/${NODENAME}.node ${AETHER_NODE_ADDR}
    else    
        printf "${VIOLET}Aether${NC} :: ${YELLOW}WARNING${NC} -> ${GREY}Node address not specified${NC}\n"
    fi
    if [ $? -ne 1 ]; then
        printf ".OFFLINE" > ${A_NODES}/${NODENAME}.node/.cache
        printf "${VIOLET}Aether${NC} :: ${GREEN}COMPLETED${NC} -> Created new node : ${NODENAME}\n"
    else
        printf "${VIOLET}Aether${NC} :: ${RED}FAILED${NC} -> Unable to create node.\n"
    fi
}
# remove the specified node
PURGE_NODE() {
    if [ -z "$NODENAME" ]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Node name not specified${NC}\n"
        exit
    else
        CHK_NODENAME
        if ${NODE_EXISTS}; then
            rm -rf ${AETHER_BASE}/nodes/${NODENAME}.node
            printf "${VIOLET}Aether${NC} :: ${GREEN}COMPLETED${NC} -> ${AVIOLET}Removed Node${NC} : ${NODENAME}\n"
        else
            printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} : ${EVIOLET}${NODENAME}${NC} -> ${GREY}Does not have any confirgration files${NC}.\n"
            exit
        fi        
    fi
}
# toggle the current state of the node
TGLE_NODE() {
    if [[ ! -d "${A_NODES}/${NODENAME}.node" ]] || [[ -z "${NODENAME}" ]]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}No such node${NC}.\n"
        exit
    fi
    PVAR=$(pgrep -f __${NODENAME}__)
    if [ -z "${PVAR}" ]; then
        CACHE_PATH="${A_NODES}/${NODENAME}.node/.cache"
        printf ".ONLINE" > ${CACHE_PATH}
        printf "${VIOLET}Aether${NC} :: ${GREEN}COMPLETED${NC} -> ${AVIOLET}Started Node${NC} : ${NODENAME}.\n"
        if [[ ${AETHER_LOG} ]]; then
            ${A_BIN}/__main__ ${AETHER_BASE} ${NODENAME} &>/dev/null & disown
        else
            printf "${VIOLET}Aether${NC} -> ${GREY}Run 0xAether in quite mode with the -l option${NC}\n"
            ${A_BIN}/__main__ ${AETHER_BASE} ${NODENAME}
        fi
    else 
        kill -9 ${PVAR} &>/dev/null
        printf ".OFFLINE" > ${A_NODES}/${NODENAME}.node/.cache
        printf "${VIOLET}Aether${NC} :: ${GREEN}COMPLETED${NC} -> ${AVIOLET}Stopped Node${NC} : ${NODENAME}.\n"
    fi
}
# show content of the log file
SHW_LOG() {
    if [ -z ${AETHER_LOG_TYPE} ]; then
        printf "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} -> ${GREY}Log type not specified${NC}.\n"
        printf "${VIOLET}Aether${NC} -> ${GREY}LOG TYPES${NC} : < ${GREEN}PERFORMANCE${NC}, ${GREEN}TRANSACTIONS${NC}, ${GREEN}ONLINE${NC} > \n"
        exit
    fi
    case $AETHER_LOG_TYPE in
        p|performance|PERFORMANCE)
            cat "${A_LOGS}/performance.log"
            ;;
        t|txn|transaction|transactions|TRANSACTION|TRANSACTIONS)
            cat "${A_LOGS}/transactions.log"
            ;;
        o|online)
            cat "${A_LOGS}/online.log"
            ;;
    esac
}
# show the last 5 lines of all log files
SHW_LOG_TAIL(){ 
    P_LOGS=$(tail -5 "${A_LOGS}/performance.log")
    T_LOGS=$(tail -5 "${A_LOGS}/transactions.log")
    L_LOGS=$(tail -5 "${A_LOGS}/online.log")

    printf "${VIOLET}Aether${NC} :: ${EVIOLET}Performance${NC} -> \n${P_LOGS}\n\n\n"
    printf "${VIOLET}Aether${NC} :: ${EVIOLET}Transactions${NC} -> \n${T_LOGS}\n\n\n"
    printf "${VIOLET}Aether${NC} :: ${EVIOLET}Online${NC} -> \n${L_LOGS}\n"
}
# upcoming feature
UPCMING_OPRTIN() {
    printf "${VIOLET}Aether${NC} -> ${GREY}Operation not avaliable yet${NC}\n"
    exit
}
# unknown operation
UNKNWN_OPRTIN() {
    printf "${VIOLET}Aether${NC} -> ${GREY}Unkown Operation${NC} \n"
    exit
}
# unknown option
UNKNWN_OPTIN() {
    printf "${VIOLET}Aether${NC} -> ${GREY}Unkown Option${NC} \n"
    exit
}
# start two seperate evms
STRT_EVM(){
    gnome-terminal --window --title "A-EVM #1234" \
    -- ganache-cli --p 1234 -l 10000000 \
    --account "0xc9ff8606e315a8bb8ab276f925485bb8cd5bd8f65bd479824292fb54274ff98d,100000000000000000000" \
    --account "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6,100000000000000000000"
    gnome-terminal --window --title "A-EVM #4321" \
    -- ganache-cli --p 4321 -l 10000000 \
    --account "0xc9ff8606e315a8bb8ab276f925485bb8cd5bd8f65bd479824292fb54274ff98d,100000000000000000000" \
    --account "0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6,100000000000000000000"
}
# stop any instances with `ganache` in the $ps
STP_EVM(){
    PVAR=$(pgrep -f ganache)
    kill -9 ${PVAR} &>/dev/null
}
# compile all contracts in contracts/
CMPL_CONTRACTS(){
    npx hardhat compile
}
# test the current setup
TST_AETHER(){
    npx hardhat test
}
RUN_SCRIPT(){
    if [ -z ${SCRPT_NAME} ]; then
        SCRPT_NAME="initial.ts"
    fi
    if [ -z ${NTWRK_ID} ]; then
        npx hardhat run scripts/${SCRPT_NAME} --network TN1
        npx hardhat run scripts/${SCRPT_NAME} --network TN4
    else
        npx hardhat run scripts/${SCRPT_NAME} --network ${NTWRK_ID}
    fi
}

#logic
#
# check if the action is help
if [ "${MAIN_FLAG}" == "help" ] || [ "${MAIN_FLAG}" == "-h" ] || [ "${MAIN_FLAG}" == "--h" ] ; then
    Help
    exit
fi

# shortcut for $(shift 1) before iterating using `getopts`
shift 

# iterate over the options provided and attach to vars
# will be used inside functions depending on ${MAIN_FLAG}
while getopts :e:f:s:r:h:l:n:i:a:t: option; do
    case "${option}" in
        e)
            envrmnt=${OPTARG}
            ;;
        n)
            NODENAME=${OPTARG}
            ;;
        r)
            rpc_envrmnt=${OPTARG}
            ;;
        s)
            SCRPT_NAME=${OPTARG}
            ;;
        d)
            NTWRK_ID=${OPTARG}
            ;;
        f)
            START_FLG=${OPTARG}
            ;;
        i)
            intractv=true
            ;;
        a)
            AETHER_NODE_ADDR=${OPTARG}
            ;;
        l)
            AETHER_LOG=false
            ;;
        t)
            AETHER_LOG_TYPE=${OPTARG}
            ;;
        *)
            UNKNWN_OPTIN
            ;;
    esac
done
# exec any command gotten via the shell on `$1`
case $MAIN_FLAG in
    init)
        # checks for conf files and then initiates aether
        PRE_INIT
        ;;
    setup)
        # setups all enviroment files for default nodes
        SETP_ENV
        ;;
    add)
        # creates a new node based on address
        CRT_NODE
        ;;
    remove)
        # removes the node speicifed
        PURGE_NODE
        ;;
    run|toggle)
        # toggles thew state of the node ONLINE <-> OFFLINE
        TGLE_NODE
        ;;
    start)
        # start EVM
        STRT_EVM
        ;;
    stop)
        # stops any instance for EVM running
        STP_EVM
        ;;
    compile)
        # compiles all contracts in `contracts/*`
        CMPL_CONTRACTS
        ;;
    test)
        # tests the current setup
        TST_AETHER
        ;;
    script)
        # runs any .ts script in `scripts/*`
        RUN_SCRIPT
        ;;
    log-tail)
        # shows the last 5 lines of all the log files
        SHW_LOG_TAIL
        ;;
    log)
        # outputs the complete log of choice
        SHW_LOG
        ;;
    config) 
        # reads the JSON configration file for the node 
        CONFIG
        ;;
    status)
        # checks the logs for the node 
        STATUS
        ;;
    list)
        # list all nodes defined in `Aether/nodes/` except default.
        LST_NODES
        ;;
    update)
        # updates chains based on current aether-conf params for all nodes.
        UPCMING_OPRTIN
        ;;
    purge)
        # removes all the nodes and aether main directory
        PURGE
        ;;
    help)
        # show help and quit
        HELP
        ;;
    *)
        # unknown operation
        UNKNWN_OPRTIN
        ;;
esac

