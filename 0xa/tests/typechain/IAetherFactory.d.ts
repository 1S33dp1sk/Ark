/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IAetherFactoryInterface extends ethers.utils.Interface {
  functions: {
    "aetherSetup()": FunctionFragment;
    "contractsDeployed()": FunctionFragment;
    "deployContract(bytes,uint256)": FunctionFragment;
    "deployNode()": FunctionFragment;
    "deployProxy(address,uint256)": FunctionFragment;
    "factoryIsNode(address)": FunctionFragment;
    "factoryIsProxy(address)": FunctionFragment;
    "nodesDeployed()": FunctionFragment;
    "setupAether()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aetherSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractsDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployContract",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployProxy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryIsNode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryIsProxy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nodesDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setupAether",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aetherSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryIsNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryIsProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodesDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupAether",
    data: BytesLike
  ): Result;

  events: {
    "ContractDeployed(address,address,uint256)": EventFragment;
    "NodeDeployed(address,address,uint256,uint256)": EventFragment;
    "ProxyDeployed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContractDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyDeployed"): EventFragment;
}

export type ContractDeployedEvent = TypedEvent<
  [string, string, BigNumber] & {
    Contract: string;
    Proxy: string;
    DeploymentID: BigNumber;
  }
>;

export type NodeDeployedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    Node: string;
    Owner: string;
    Timestamp: BigNumber;
    DeploymentID: BigNumber;
  }
>;

export type ProxyDeployedEvent = TypedEvent<
  [string, string, BigNumber] & {
    Proxy: string;
    ProxyTo: string;
    DeploymentID: BigNumber;
  }
>;

export class IAetherFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IAetherFactoryInterface;

  functions: {
    aetherSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractsDeployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    deployContract(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deployProxy(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factoryIsNode(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    factoryIsProxy(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nodesDeployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    setupAether(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  aetherSetup(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractsDeployed(overrides?: CallOverrides): Promise<BigNumber>;

  deployContract(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployNode(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deployProxy(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factoryIsNode(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  factoryIsProxy(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nodesDeployed(overrides?: CallOverrides): Promise<BigNumber>;

  setupAether(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    aetherSetup(overrides?: CallOverrides): Promise<void>;

    contractsDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    deployContract(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNode(overrides?: CallOverrides): Promise<string>;

    deployProxy(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    factoryIsNode(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    factoryIsProxy(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nodesDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    setupAether(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ContractDeployed(address,address,uint256)"(
      Contract?: string | null,
      Proxy?: string | null,
      DeploymentID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { Contract: string; Proxy: string; DeploymentID: BigNumber }
    >;

    ContractDeployed(
      Contract?: string | null,
      Proxy?: string | null,
      DeploymentID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { Contract: string; Proxy: string; DeploymentID: BigNumber }
    >;

    "NodeDeployed(address,address,uint256,uint256)"(
      Node?: string | null,
      Owner?: string | null,
      Timestamp?: null,
      DeploymentID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        Node: string;
        Owner: string;
        Timestamp: BigNumber;
        DeploymentID: BigNumber;
      }
    >;

    NodeDeployed(
      Node?: string | null,
      Owner?: string | null,
      Timestamp?: null,
      DeploymentID?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        Node: string;
        Owner: string;
        Timestamp: BigNumber;
        DeploymentID: BigNumber;
      }
    >;

    "ProxyDeployed(address,address,uint256)"(
      Proxy?: string | null,
      ProxyTo?: string | null,
      DeploymentID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { Proxy: string; ProxyTo: string; DeploymentID: BigNumber }
    >;

    ProxyDeployed(
      Proxy?: string | null,
      ProxyTo?: string | null,
      DeploymentID?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { Proxy: string; ProxyTo: string; DeploymentID: BigNumber }
    >;
  };

  estimateGas: {
    aetherSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractsDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    deployContract(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deployProxy(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factoryIsNode(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    factoryIsProxy(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nodesDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    setupAether(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aetherSetup(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractsDeployed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployContract(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deployProxy(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factoryIsNode(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factoryIsProxy(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodesDeployed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setupAether(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
