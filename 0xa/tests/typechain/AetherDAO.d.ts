/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AetherDAOInterface extends ethers.utils.Interface {
  functions: {
    "_AetherToken_()": FunctionFragment;
    "aetherBonds()": FunctionFragment;
    "aetherDAO()": FunctionFragment;
    "aetherFactory()": FunctionFragment;
    "aetherHUB()": FunctionFragment;
    "aetherID()": FunctionFragment;
    "aetherKeeper()": FunctionFragment;
    "aetherRouter()": FunctionFragment;
    "aetherToken()": FunctionFragment;
    "bondMaturityTime()": FunctionFragment;
    "depletionDivisor()": FunctionFragment;
    "depletionMultiplier()": FunctionFragment;
    "depletionRatio()": FunctionFragment;
    "finalizeProposal(bytes32)": FunctionFragment;
    "gasMarkup()": FunctionFragment;
    "getAetherAddress(uint256)": FunctionFragment;
    "getLastEdit(bytes4)": FunctionFragment;
    "getProposal(bytes32)": FunctionFragment;
    "getProposalExpiry(bytes32)": FunctionFragment;
    "getProposalReference(uint256)": FunctionFragment;
    "getProposalResolution(bytes32)": FunctionFragment;
    "getProposalStatus(bytes32)": FunctionFragment;
    "getProposalVotes(bytes32)": FunctionFragment;
    "getVar(string)": FunctionFragment;
    "getVarName(bytes4)": FunctionFragment;
    "getVarRef(string)": FunctionFragment;
    "getVarVal(string)": FunctionFragment;
    "holderThreshold()": FunctionFragment;
    "isDAOMember(address)": FunctionFragment;
    "isDAOPartner(address)": FunctionFragment;
    "isHolder(address)": FunctionFragment;
    "isNodeOwner(address)": FunctionFragment;
    "isProposalActive(bytes32)": FunctionFragment;
    "isTreasuryPartner(address)": FunctionFragment;
    "memberVote(bytes32,address)": FunctionFragment;
    "membershipFor(address,uint8)": FunctionFragment;
    "nodeThreshold()": FunctionFragment;
    "nodesAllocation()": FunctionFragment;
    "proposalTime()": FunctionFragment;
    "proposalsCount()": FunctionFragment;
    "rewardLedger()": FunctionFragment;
    "rewardsTreasury()": FunctionFragment;
    "signersThreshold()": FunctionFragment;
    "submitProposal(string,string,uint256)": FunctionFragment;
    "targetGas()": FunctionFragment;
    "targetNative()": FunctionFragment;
    "targetTransactions()": FunctionFragment;
    "transactionThreshold()": FunctionFragment;
    "treasuryThreshold()": FunctionFragment;
    "varExists(bytes4)": FunctionFragment;
    "voteOnProposal(bytes32,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_AetherToken_",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherBonds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherDAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherHUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "aetherID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondMaturityTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depletionDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depletionMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depletionRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gasMarkup", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAetherAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastEdit",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalExpiry",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalReference",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalResolution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVotes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getVar", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getVarName",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getVarRef", values: [string]): string;
  encodeFunctionData(functionFragment: "getVarVal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "holderThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDAOMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDAOPartner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isHolder", values: [string]): string;
  encodeFunctionData(functionFragment: "isNodeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isProposalActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTreasuryPartner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "memberVote",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodesAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardLedger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signersThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "targetGas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "varExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnProposal",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_AetherToken_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherHUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aetherID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondMaturityTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depletionDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depletionMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depletionRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasMarkup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAetherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastEdit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVarName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVarRef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVarVal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "holderThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDAOMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDAOPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHolder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTreasuryPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memberVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membershipFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodesAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardLedger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signersThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "targetGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "varExists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnProposal",
    data: BytesLike
  ): Result;

  events: {
    "ConcludeProposal(address,bytes32,uint8,uint256)": EventFragment;
    "InitiateProposal(address,address,string,bytes32,string,uint256)": EventFragment;
    "VariableAdded(address,string,uint256,uint256)": EventFragment;
    "VariableChange(address,bytes4,uint256)": EventFragment;
    "Vote(address,address,bytes32,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConcludeProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VariableAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VariableChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
}

export type ConcludeProposalEvent = TypedEvent<
  [string, string, number, BigNumber] & {
    AetherDAO: string;
    ProposalReference: string;
    ProposalResolution: number;
    ProposalVotes: BigNumber;
  }
>;

export type InitiateProposalEvent = TypedEvent<
  [string, string, string, string, string, BigNumber] & {
    AetherDAO: string;
    Composer: string;
    ProposalLink: string;
    ProposalReference: string;
    ProposalVariable: string;
    ProposalValue: BigNumber;
  }
>;

export type VariableAddedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    AetherDAO: string;
    VariableName: string;
    VariableValue: BigNumber;
    VariableOscillation: BigNumber;
  }
>;

export type VariableChangeEvent = TypedEvent<
  [string, string, BigNumber] & {
    AetherDAO: string;
    VariableReference: string;
    VariableValue: BigNumber;
  }
>;

export type VoteEvent = TypedEvent<
  [string, string, string, number] & {
    AetherDAO: string;
    DAOMember: string;
    ProposalReference: string;
    voteType: number;
  }
>;

export class AetherDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AetherDAOInterface;

  functions: {
    _AetherToken_(overrides?: CallOverrides): Promise<[string]>;

    aetherBonds(overrides?: CallOverrides): Promise<[string]>;

    aetherDAO(overrides?: CallOverrides): Promise<[string]>;

    aetherFactory(overrides?: CallOverrides): Promise<[string]>;

    aetherHUB(overrides?: CallOverrides): Promise<[string]>;

    aetherID(overrides?: CallOverrides): Promise<[BigNumber]>;

    aetherKeeper(overrides?: CallOverrides): Promise<[string]>;

    aetherRouter(overrides?: CallOverrides): Promise<[string]>;

    aetherToken(overrides?: CallOverrides): Promise<[string]>;

    bondMaturityTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    depletionDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    depletionMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    depletionRatio(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    finalizeProposal(
      proposalReference: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gasMarkup(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contractAddress: string }>;

    "getLastEdit(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastEdit(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposal(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber],
        number,
        number
      ] & {
        proposalLink: string;
        proposalVarName: string;
        proposalVarVal: BigNumber;
        proposalExpiry: BigNumber;
        proposalVotes: [BigNumber, BigNumber, BigNumber];
        proposalStatus: number;
        ProposalResolution: number;
      }
    >;

    getProposalExpiry(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposalReference(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposalResolution(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProposalStatus(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProposalVotes(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    "getVar(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        variableValue: BigNumber;
        variableName: string;
        variableOsc: BigNumber;
      }
    >;

    "getVar(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        variableValue: BigNumber;
        variableName: string;
        variableOsc: BigNumber;
      }
    >;

    getVarName(varRef: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getVarRef(varName: string, overrides?: CallOverrides): Promise<[string]>;

    "getVarVal(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getVarVal(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    holderThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDAOMember(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDAOPartner(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isHolder(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isNodeOwner(_addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isProposalActive(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTreasuryPartner(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memberVote(
      proposalReference: BytesLike,
      voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    membershipFor(
      _addr: string,
      _membership: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodesAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposalsCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardLedger(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardsTreasury(overrides?: CallOverrides): Promise<[BigNumber]>;

    signersThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitProposal(
      proposalLink: string,
      proposalVarName: string,
      proposalVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetNative(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactionThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    "varExists(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "varExists(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteOnProposal(
      proposalReference: BytesLike,
      proposalVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _AetherToken_(overrides?: CallOverrides): Promise<string>;

  aetherBonds(overrides?: CallOverrides): Promise<string>;

  aetherDAO(overrides?: CallOverrides): Promise<string>;

  aetherFactory(overrides?: CallOverrides): Promise<string>;

  aetherHUB(overrides?: CallOverrides): Promise<string>;

  aetherID(overrides?: CallOverrides): Promise<BigNumber>;

  aetherKeeper(overrides?: CallOverrides): Promise<string>;

  aetherRouter(overrides?: CallOverrides): Promise<string>;

  aetherToken(overrides?: CallOverrides): Promise<string>;

  bondMaturityTime(overrides?: CallOverrides): Promise<BigNumber>;

  depletionDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  depletionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  depletionRatio(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  finalizeProposal(
    proposalReference: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gasMarkup(overrides?: CallOverrides): Promise<BigNumber>;

  getAetherAddress(
    contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLastEdit(bytes4)"(
    varRef: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastEdit(string)"(
    varName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposal(
    proposalReference: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber],
      number,
      number
    ] & {
      proposalLink: string;
      proposalVarName: string;
      proposalVarVal: BigNumber;
      proposalExpiry: BigNumber;
      proposalVotes: [BigNumber, BigNumber, BigNumber];
      proposalStatus: number;
      ProposalResolution: number;
    }
  >;

  getProposalExpiry(
    proposalReference: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalReference(
    proposalIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalResolution(
    proposalReference: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getProposalStatus(
    proposalReference: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getProposalVotes(
    proposalReference: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getVar(string)"(
    varName: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      variableValue: BigNumber;
      variableName: string;
      variableOsc: BigNumber;
    }
  >;

  "getVar(bytes4)"(
    varRef: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      variableValue: BigNumber;
      variableName: string;
      variableOsc: BigNumber;
    }
  >;

  getVarName(varRef: BytesLike, overrides?: CallOverrides): Promise<string>;

  getVarRef(varName: string, overrides?: CallOverrides): Promise<string>;

  "getVarVal(string)"(
    varName: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getVarVal(bytes4)"(
    varRef: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  holderThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  isDAOMember(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isDAOPartner(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isHolder(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isNodeOwner(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  isProposalActive(
    proposalReference: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTreasuryPartner(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  memberVote(
    proposalReference: BytesLike,
    voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  membershipFor(
    _addr: string,
    _membership: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  nodesAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

  rewardLedger(overrides?: CallOverrides): Promise<BigNumber>;

  rewardsTreasury(overrides?: CallOverrides): Promise<BigNumber>;

  signersThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  submitProposal(
    proposalLink: string,
    proposalVarName: string,
    proposalVal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetGas(overrides?: CallOverrides): Promise<BigNumber>;

  targetNative(overrides?: CallOverrides): Promise<BigNumber>;

  targetTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  transactionThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "varExists(bytes4)"(
    varRef: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "varExists(string)"(
    varName: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteOnProposal(
    proposalReference: BytesLike,
    proposalVote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _AetherToken_(overrides?: CallOverrides): Promise<string>;

    aetherBonds(overrides?: CallOverrides): Promise<string>;

    aetherDAO(overrides?: CallOverrides): Promise<string>;

    aetherFactory(overrides?: CallOverrides): Promise<string>;

    aetherHUB(overrides?: CallOverrides): Promise<string>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<string>;

    aetherRouter(overrides?: CallOverrides): Promise<string>;

    aetherToken(overrides?: CallOverrides): Promise<string>;

    bondMaturityTime(overrides?: CallOverrides): Promise<BigNumber>;

    depletionDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    depletionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    depletionRatio(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    finalizeProposal(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    gasMarkup(overrides?: CallOverrides): Promise<BigNumber>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLastEdit(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastEdit(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber],
        number,
        number
      ] & {
        proposalLink: string;
        proposalVarName: string;
        proposalVarVal: BigNumber;
        proposalExpiry: BigNumber;
        proposalVotes: [BigNumber, BigNumber, BigNumber];
        proposalStatus: number;
        ProposalResolution: number;
      }
    >;

    getProposalExpiry(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalReference(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalResolution(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getProposalStatus(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getProposalVotes(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getVar(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        variableValue: BigNumber;
        variableName: string;
        variableOsc: BigNumber;
      }
    >;

    "getVar(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        variableValue: BigNumber;
        variableName: string;
        variableOsc: BigNumber;
      }
    >;

    getVarName(varRef: BytesLike, overrides?: CallOverrides): Promise<string>;

    getVarRef(varName: string, overrides?: CallOverrides): Promise<string>;

    "getVarVal(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVarVal(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isDAOMember(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isDAOPartner(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isHolder(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isNodeOwner(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    isProposalActive(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTreasuryPartner(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberVote(
      proposalReference: BytesLike,
      voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    membershipFor(
      _addr: string,
      _membership: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    nodesAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    rewardLedger(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    signersThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      proposalLink: string,
      proposalVarName: string,
      proposalVal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    targetGas(overrides?: CallOverrides): Promise<BigNumber>;

    targetNative(overrides?: CallOverrides): Promise<BigNumber>;

    targetTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    transactionThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "varExists(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "varExists(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteOnProposal(
      proposalReference: BytesLike,
      proposalVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConcludeProposal(address,bytes32,uint8,uint256)"(
      AetherDAO?: string | null,
      ProposalReference?: null,
      ProposalResolution?: null,
      ProposalVotes?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      {
        AetherDAO: string;
        ProposalReference: string;
        ProposalResolution: number;
        ProposalVotes: BigNumber;
      }
    >;

    ConcludeProposal(
      AetherDAO?: string | null,
      ProposalReference?: null,
      ProposalResolution?: null,
      ProposalVotes?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      {
        AetherDAO: string;
        ProposalReference: string;
        ProposalResolution: number;
        ProposalVotes: BigNumber;
      }
    >;

    "InitiateProposal(address,address,string,bytes32,string,uint256)"(
      AetherDAO?: string | null,
      Composer?: string | null,
      ProposalLink?: null,
      ProposalReference?: null,
      ProposalVariable?: null,
      ProposalValue?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber],
      {
        AetherDAO: string;
        Composer: string;
        ProposalLink: string;
        ProposalReference: string;
        ProposalVariable: string;
        ProposalValue: BigNumber;
      }
    >;

    InitiateProposal(
      AetherDAO?: string | null,
      Composer?: string | null,
      ProposalLink?: null,
      ProposalReference?: null,
      ProposalVariable?: null,
      ProposalValue?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber],
      {
        AetherDAO: string;
        Composer: string;
        ProposalLink: string;
        ProposalReference: string;
        ProposalVariable: string;
        ProposalValue: BigNumber;
      }
    >;

    "VariableAdded(address,string,uint256,uint256)"(
      AetherDAO?: string | null,
      VariableName?: null,
      VariableValue?: null,
      VariableOscillation?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        AetherDAO: string;
        VariableName: string;
        VariableValue: BigNumber;
        VariableOscillation: BigNumber;
      }
    >;

    VariableAdded(
      AetherDAO?: string | null,
      VariableName?: null,
      VariableValue?: null,
      VariableOscillation?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        AetherDAO: string;
        VariableName: string;
        VariableValue: BigNumber;
        VariableOscillation: BigNumber;
      }
    >;

    "VariableChange(address,bytes4,uint256)"(
      AetherDAO?: string | null,
      VariableReference?: null,
      VariableValue?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { AetherDAO: string; VariableReference: string; VariableValue: BigNumber }
    >;

    VariableChange(
      AetherDAO?: string | null,
      VariableReference?: null,
      VariableValue?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { AetherDAO: string; VariableReference: string; VariableValue: BigNumber }
    >;

    "Vote(address,address,bytes32,uint8)"(
      AetherDAO?: string | null,
      DAOMember?: string | null,
      ProposalReference?: null,
      voteType?: null
    ): TypedEventFilter<
      [string, string, string, number],
      {
        AetherDAO: string;
        DAOMember: string;
        ProposalReference: string;
        voteType: number;
      }
    >;

    Vote(
      AetherDAO?: string | null,
      DAOMember?: string | null,
      ProposalReference?: null,
      voteType?: null
    ): TypedEventFilter<
      [string, string, string, number],
      {
        AetherDAO: string;
        DAOMember: string;
        ProposalReference: string;
        voteType: number;
      }
    >;
  };

  estimateGas: {
    _AetherToken_(overrides?: CallOverrides): Promise<BigNumber>;

    aetherBonds(overrides?: CallOverrides): Promise<BigNumber>;

    aetherDAO(overrides?: CallOverrides): Promise<BigNumber>;

    aetherFactory(overrides?: CallOverrides): Promise<BigNumber>;

    aetherHUB(overrides?: CallOverrides): Promise<BigNumber>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    aetherRouter(overrides?: CallOverrides): Promise<BigNumber>;

    aetherToken(overrides?: CallOverrides): Promise<BigNumber>;

    bondMaturityTime(overrides?: CallOverrides): Promise<BigNumber>;

    depletionDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    depletionMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    depletionRatio(overrides?: CallOverrides): Promise<BigNumber>;

    finalizeProposal(
      proposalReference: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gasMarkup(overrides?: CallOverrides): Promise<BigNumber>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastEdit(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastEdit(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposal(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalExpiry(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalReference(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalResolution(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalStatus(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalVotes(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVar(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVar(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVarName(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVarRef(varName: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getVarVal(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVarVal(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holderThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isDAOMember(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDAOPartner(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isHolder(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isNodeOwner(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isProposalActive(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTreasuryPartner(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberVote(
      proposalReference: BytesLike,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    membershipFor(
      _addr: string,
      _membership: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    nodesAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposalsCount(overrides?: CallOverrides): Promise<BigNumber>;

    rewardLedger(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    signersThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      proposalLink: string,
      proposalVarName: string,
      proposalVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetGas(overrides?: CallOverrides): Promise<BigNumber>;

    targetNative(overrides?: CallOverrides): Promise<BigNumber>;

    targetTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    transactionThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "varExists(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "varExists(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOnProposal(
      proposalReference: BytesLike,
      proposalVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _AetherToken_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherBonds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherHUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondMaturityTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depletionDivisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depletionMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depletionRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizeProposal(
      proposalReference: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gasMarkup(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastEdit(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastEdit(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalExpiry(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalReference(
      proposalIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalResolution(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalStatus(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalVotes(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVar(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVar(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVarName(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVarRef(
      varName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVarVal(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVarVal(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holderThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDAOMember(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDAOPartner(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHolder(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNodeOwner(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalActive(
      proposalReference: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTreasuryPartner(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberVote(
      proposalReference: BytesLike,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membershipFor(
      _addr: string,
      _membership: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodesAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardLedger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signersThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProposal(
      proposalLink: string,
      proposalVarName: string,
      proposalVal: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "varExists(bytes4)"(
      varRef: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "varExists(string)"(
      varName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOnProposal(
      proposalReference: BytesLike,
      proposalVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
