/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IKeeperNodesInterface extends ethers.utils.Interface {
  functions: {
    "nodesOfOwner(address)": FunctionFragment;
    "registeredNodes()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "nodesOfOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredNodes",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "nodesOfOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredNodes",
    data: BytesLike
  ): Result;

  events: {
    "MakeNode(address,address,uint256,uint256)": EventFragment;
    "NodeActualized(address,uint256,uint256)": EventFragment;
    "NodeDissolved(address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MakeNode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeActualized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeDissolved"): EventFragment;
}

export type MakeNodeEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    NodeOwner: string;
    Node: string;
    NodeFIA: BigNumber;
    NodeReleaseTime: BigNumber;
  }
>;

export type NodeActualizedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    Node: string;
    NodeInitialStake: BigNumber;
    NodeReleaseTime: BigNumber;
  }
>;

export type NodeDissolvedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string] & {
    Node: string;
    NodeFIA: BigNumber;
    NodeReward: BigNumber;
    NodeInitialStake: BigNumber;
    NodeOwner: string;
  }
>;

export class IKeeperNodes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IKeeperNodesInterface;

  functions: {
    nodesOfOwner(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    registeredNodes(overrides?: CallOverrides): Promise<[string[]]>;
  };

  nodesOfOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  registeredNodes(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    nodesOfOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registeredNodes(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "MakeNode(address,address,uint256,uint256)"(
      NodeOwner?: string | null,
      Node?: string | null,
      NodeFIA?: null,
      NodeReleaseTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        NodeOwner: string;
        Node: string;
        NodeFIA: BigNumber;
        NodeReleaseTime: BigNumber;
      }
    >;

    MakeNode(
      NodeOwner?: string | null,
      Node?: string | null,
      NodeFIA?: null,
      NodeReleaseTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        NodeOwner: string;
        Node: string;
        NodeFIA: BigNumber;
        NodeReleaseTime: BigNumber;
      }
    >;

    "NodeActualized(address,uint256,uint256)"(
      Node?: null,
      NodeInitialStake?: null,
      NodeReleaseTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { Node: string; NodeInitialStake: BigNumber; NodeReleaseTime: BigNumber }
    >;

    NodeActualized(
      Node?: null,
      NodeInitialStake?: null,
      NodeReleaseTime?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { Node: string; NodeInitialStake: BigNumber; NodeReleaseTime: BigNumber }
    >;

    "NodeDissolved(address,uint256,uint256,uint256,address)"(
      Node?: null,
      NodeFIA?: null,
      NodeReward?: null,
      NodeInitialStake?: null,
      NodeOwner?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        Node: string;
        NodeFIA: BigNumber;
        NodeReward: BigNumber;
        NodeInitialStake: BigNumber;
        NodeOwner: string;
      }
    >;

    NodeDissolved(
      Node?: null,
      NodeFIA?: null,
      NodeReward?: null,
      NodeInitialStake?: null,
      NodeOwner?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber, string],
      {
        Node: string;
        NodeFIA: BigNumber;
        NodeReward: BigNumber;
        NodeInitialStake: BigNumber;
        NodeOwner: string;
      }
    >;
  };

  estimateGas: {
    nodesOfOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    registeredNodes(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    nodesOfOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
