/// IXR \\\
the indexer

#ifndef __IXR__H
#include "ixr.h"
#endif


#ifndef __ixr_name
	#define __ixr_name "indexer"
static const char *__ixr_frame="@charms/.lbb";
static const char *IXR_KV_FMT="K:V";
static const char *__KVFMT="%lx@%s\n";
static const char *IXR_KVP_FMT="%s=P";
static const char *IXR_KVPS_FMT="%s:=S";
static const char *IXR_KVPSD_FMT="%s=:D";

#define KV_SEP ':'
#define ENV_SEP '='
#define ATT_SEP '@'

#define LONG_SIZE ULONG_SIZE
#define ULONG_SIZE ((ulong)(sizeof(ulong)))
#define uc_size(x) ((ulong)(x*sizeof(uchar)))


static ulong ___offset=0;


	ulong __index_increment() {
		__cindex+=1;
		return __cindex;
	};

	ulong __set_next(char *__head){


		ulong __len=strlen(__head);
		return (ulong)write(__ixr_fd,__head,__len);
	};

	char *__gdelim(__gev __gtype) {
		char __delim[3];
		memset(&__delim,0,3);
		switch(__gtype){
			case __key_value:
				__delim[0]=KV_SEP;
				__delim[1]='\0';
				return strdup(__delim);
			case __env_variable:
				__delim[0]=ENV_SEP;
				__delim[1]='\0';
				return strdup(__delim);
			case __sock_address:
				__delim[0]=KV_SEP;
				__delim[1]=ENV_SEP;
				break;
			case __description:
				__delim[0]=ENV_SEP;
				__delim[1]=KV_SEP;
				break;
			default:break;
		}
		__delim[2]='\0';
		#ifdef DEBUG
			printf("delimiter is '%s'\n",__delim);
		#endif
		return strdup(__delim);
	};

	char *__generic_fmt(__gev g_type,char *__key, char *__value){
		ulong klen=strlen(__key);
		ulong vlen=strlen(__value);
		ulong clen=klen+vlen+2;

		// log_gfmt(g_type);
		// log_keyvalue(__key,__value);

		char lbb_field[clen];
		memset(&lbb_field,0,clen);
		lbb_field[clen]='\0';
		memmove(lbb_field,__key,klen);
		char *_delim=__gdelim(g_type);
		ulong __dlen=strlen(_delim);
		memmove((lbb_field+klen),_delim, __dlen);
		memmove((lbb_field+klen+__dlen),__value,vlen);

		#ifdef LBB_PRINT
			__ASCII(lbb_field)
		#endif
		#ifdef DEBUG
			printf("{%s}",lbb_field);
		#endif
		return strdup(lbb_field);
	};

	ulong indexer_start(char *idxr){
		if(__cindex!=0){
			return 0;
		};
		#ifndef INDEXER
			#define INDEXER __cindex;
		#endif
		return __index_increment();
	};

	ulong  __indexer__(char *idxnr) {
		int ixr_fd=open(__ixr_frame,(O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_NOFOLLOW_ANY),(S_IRWXU|S_IXGRP|S_IXOTH));
		
		#ifdef DEBUG
			printf("file descriptor :open::%d\n",ixr_fd);
		#endif
		if(ixr_fd==-1){
			return 0;
		};
		__ixr_fd=ixr_fd;
		#ifdef DEBUG
			printf("indexer field :%s::%lu\n",idxnr,__cindex);
			OUT_ASCII(__ixr_fd,idxnr);
		#endif
		return indexer_start(idxnr)==0?0:__cindex;
	};

	ulong __set_start(char *__idxnr) {
		return __indexer__(__idxnr);
	};

	int __set_istart(ulong __inn){
		#ifndef DEBUG_WLC
			printf("inodenumber :: %lu\n",__inn);
		#endif
		return __indexer__((char *)hashof(2,&__inn,ULONG_SIZE));
	};

	ulong __set_comp(char *__eof_seq){
		ulong eslen=strlen(__eof_seq);ulong esqlen=eslen+2;
		char __[esqlen];
		memset(&__,0,esqlen);
		memmove(__,__eof_seq,eslen);
		memmove((__+eslen),"\n\0",2);
		ulong res=__set_next(__);
		close(__ixr_fd);
		return res;
	};

	char *__index(char *__) {
		ulong llen=__set_next(__);

		return (char *)hashof(1,(void *)IDXR,LONG_SIZE);
	};



































	void log_gfmt(__gev g_type) {
		switch(g_type) {
		case __key_value: __TEXT(Key:Value); break;
		case __env_variable: __TEXT(Enviroment=Spec); break;
		case __sock_address: __TEXT(Socket:=Address); break;
		case __description: __TEXT(Description=:Callable); break;
		default: __TEXT(Unknown); break;
		};
	};

	void log_keyvalue(char *key, char *value) {
		__ASCII(key);
		__ASCII(value);
	};



#endif


















