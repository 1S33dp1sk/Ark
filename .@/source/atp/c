/// ATP \\\
@ protocol


#ifndef __ATP__H
#include "atp.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <netdb.h>
#include <sys/wait.h>
#include <errno.h>


// get sockaddr, IPv4 or IPv6:
void *__sok_addr(struct sockaddr *sa) {
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }
    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

struct addrinfo __hints() {
	struct addrinfo info;
	info.ai_socktype=SOCK_STREAM;
	info.ai_family=AF_UNSPEC;

	return info;
}


char const *hashof(unsigned level, void const *to_hash, ulong hash_size);


char *uname(const char *__filename) {

	return (char *)hashof(2,__filename,strlen(__filename));
};


#ifndef LES
int les(void) {
    printf("d-cloud : atp {les}\n");
    int __fd, temp_fd, __yes=1, __rv;
    struct addrinfo hints=__hints(); 
    struct addrinfo *__servinfo, *temp;
    struct sockaddr_storage __caddr;

    socklen_t __sin_size;
    char __saddr[INET6_ADDRSTRLEN];

    if ((__rv=getaddrinfo(NULL,ATP_PORT,&hints,&__servinfo))!=0){
        #ifdef DEBUG
            fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(__rv));
        #endif
        return 1;
    }

    for(temp=__servinfo;temp!=NULL;temp=temp->ai_next){
        if((__fd=socket(temp->ai_family,temp->ai_socktype,temp->ai_protocol))==-1){
            #ifdef DEBUG
                perror("server :: socket\n");
            #endif
            continue;
        }
        if(setsockopt(__fd,SOL_SOCKET,SO_REUSEADDR,&__yes,sizeof(unsigned))==-1){
            #ifdef DEBUG
                perror("setsockopt\n");
            #endif
            exit(1);
        }
        if(bind(__fd,temp->ai_addr,temp->ai_addrlen)==-1){
            close(__fd);
            #ifdef DEBUG
                perror("server: bind\n");
            #endif
            continue;
        }
        break;
    }

    freeaddrinfo(__servinfo);

    if(temp==NULL){
        #ifdef DEBUG
            fprintf(stderr,"server : failed to bind\n");
        #endif
        exit(1);
    }
    if(listen(__fd,ATP_INUM)==-1){
        #ifdef DEBUG
            perror("listen\n");
        #endif
        exit(1);
    }

    while(1){
        __sin_size=sizeof(__caddr);
        temp_fd=accept(__fd,(struct sockaddr*)&__caddr,&__sin_size);
        if(temp_fd==-1){
            #ifdef DEBUG
                perror("accept\n");
            #endif
            continue;
        }
        inet_ntop(__caddr.ss_family,__sok_addr((struct sockaddr*)&__caddr), __saddr, sizeof(__saddr));
        #if LBB_LOG >= 2
            printf("server : got connection from %s\n",__saddr);
        #endif
        if(!fork()){
            close(__fd);

            char *msg_to_send="Hello World\0";
            ulong msglen=strlen(msg_to_send);

            if(send(temp_fd,msg_to_send,msglen,0)==-1){
                #ifdef DEBUG
                    perror("send\n");
                #endif
            }
            close(temp_fd);
            exit(0);
        }
        close(temp_fd);
    }
    return 0;
}
#define LES les
#endif

#ifndef MOR
int mor(void) {
    printf("d-cloud : atp {mor}\n");

    #define SOK_CONNECT 1
    int sockfd, numbytes;  
    char buf[ATP_BUFFER_SIZE];
    struct addrinfo hints=__hints();
    struct addrinfo *servinfo, *p;
    int rv;
    char s[INET6_ADDRSTRLEN];


    if ((rv = getaddrinfo(NULL, ATP_PORT, &hints, &servinfo)) != 0) {
        #ifdef DEBUG
            fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        #endif
        return 1;
    }

    // loop through all the results and connect to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            #ifdef DEBUG
                perror("client: socket");
            #endif
            continue;
        }

        if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            #ifdef DEBUG
                perror("client: connect");
            #endif
            continue;
        }

        break;
    }

    if (p == NULL) {
        #ifdef DEBUG
            fprintf(stderr, "client: failed to connect\n");
        #endif
        return 2;
    }

    inet_ntop(p->ai_family, __sok_addr((struct sockaddr *)p->ai_addr),
            s, sizeof s);
    #if LBB_LOG == 2
        printf("client: connecting to %s\n", s);
    #endif
    freeaddrinfo(servinfo); // all done with this structure

    if ((numbytes = recv(sockfd, buf, ATP_BUFFER_SIZE-1, 0)) == -1) {
        #ifdef DEBUG
            perror("recv");
        #endif
        exit(1);
    }

    buf[numbytes] = '\0';

    #if LBB_LOG == 2
        printf("client: received '%s'\n",buf);
    #endif
    close(sockfd);

    return 0;
}
#define MOR mor
#endif





int __fifo_att(char **__args, ...) {
#if __AP_FIFO__ == 1
    Display(at fifo)
    #endif
    return 0;
};
































