/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDAOProposalsInterface extends ethers.utils.Interface {
  functions: {
    "finalizeProposal(bytes32)": FunctionFragment;
    "getProposal(bytes32)": FunctionFragment;
    "getProposalExpiry(bytes32)": FunctionFragment;
    "getProposalReference(uint256)": FunctionFragment;
    "getProposalResolution(bytes32)": FunctionFragment;
    "getProposalStatus(bytes32)": FunctionFragment;
    "getProposalVotes(bytes32)": FunctionFragment;
    "isProposalActive(bytes32)": FunctionFragment;
    "memberVote(bytes32,address)": FunctionFragment;
    "proposalTime()": FunctionFragment;
    "submitProposal(string,string,uint256)": FunctionFragment;
    "voteOnProposal(bytes32,uint8)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "finalizeProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalExpiry",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalReference",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalResolution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVotes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "memberVote",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnProposal",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalReference",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalResolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "memberVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnProposal",
    data: BytesLike
  ): Result;

  events: {
    "ConcludeProposal(address,bytes32,uint8,uint256)": EventFragment;
    "InitiateProposal(address,address,string,bytes32,string,uint256)": EventFragment;
    "Vote(address,address,bytes32,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConcludeProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
}

export type ConcludeProposalEvent = TypedEvent<
  [string, string, number, BigNumber] & {
    AetherDAO: string;
    ProposalReference: string;
    ProposalResolution: number;
    ProposalVotes: BigNumber;
  }
>;

export type InitiateProposalEvent = TypedEvent<
  [string, string, string, string, string, BigNumber] & {
    AetherDAO: string;
    Composer: string;
    ProposalLink: string;
    ProposalReference: string;
    ProposalVariable: string;
    ProposalValue: BigNumber;
  }
>;

export type VoteEvent = TypedEvent<
  [string, string, string, number] & {
    AetherDAO: string;
    DAOMember: string;
    ProposalReference: string;
    voteType: number;
  }
>;

export class IDAOProposals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDAOProposalsInterface;

  functions: {
    finalizeProposal(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber],
        number,
        number
      ]
    >;

    getProposalExpiry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProposalReference(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProposalResolution(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProposalStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getProposalVotes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber, BigNumber]]>;

    isProposalActive(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memberVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    proposalTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitProposal(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voteOnProposal(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  finalizeProposal(
    arg0: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      [BigNumber, BigNumber, BigNumber],
      number,
      number
    ]
  >;

  getProposalExpiry(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalReference(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getProposalResolution(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getProposalStatus(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  getProposalVotes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  isProposalActive(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memberVote(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<number>;

  proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

  submitProposal(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voteOnProposal(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    finalizeProposal(arg0: BytesLike, overrides?: CallOverrides): Promise<void>;

    getProposal(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        [BigNumber, BigNumber, BigNumber],
        number,
        number
      ]
    >;

    getProposalExpiry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalReference(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getProposalResolution(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getProposalStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    getProposalVotes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    isProposalActive(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<number>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    voteOnProposal(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConcludeProposal(address,bytes32,uint8,uint256)"(
      AetherDAO?: string | null,
      ProposalReference?: null,
      ProposalResolution?: null,
      ProposalVotes?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      {
        AetherDAO: string;
        ProposalReference: string;
        ProposalResolution: number;
        ProposalVotes: BigNumber;
      }
    >;

    ConcludeProposal(
      AetherDAO?: string | null,
      ProposalReference?: null,
      ProposalResolution?: null,
      ProposalVotes?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber],
      {
        AetherDAO: string;
        ProposalReference: string;
        ProposalResolution: number;
        ProposalVotes: BigNumber;
      }
    >;

    "InitiateProposal(address,address,string,bytes32,string,uint256)"(
      AetherDAO?: string | null,
      Composer?: string | null,
      ProposalLink?: null,
      ProposalReference?: null,
      ProposalVariable?: null,
      ProposalValue?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber],
      {
        AetherDAO: string;
        Composer: string;
        ProposalLink: string;
        ProposalReference: string;
        ProposalVariable: string;
        ProposalValue: BigNumber;
      }
    >;

    InitiateProposal(
      AetherDAO?: string | null,
      Composer?: string | null,
      ProposalLink?: null,
      ProposalReference?: null,
      ProposalVariable?: null,
      ProposalValue?: null
    ): TypedEventFilter<
      [string, string, string, string, string, BigNumber],
      {
        AetherDAO: string;
        Composer: string;
        ProposalLink: string;
        ProposalReference: string;
        ProposalVariable: string;
        ProposalValue: BigNumber;
      }
    >;

    "Vote(address,address,bytes32,uint8)"(
      AetherDAO?: string | null,
      DAOMember?: string | null,
      ProposalReference?: null,
      voteType?: null
    ): TypedEventFilter<
      [string, string, string, number],
      {
        AetherDAO: string;
        DAOMember: string;
        ProposalReference: string;
        voteType: number;
      }
    >;

    Vote(
      AetherDAO?: string | null,
      DAOMember?: string | null,
      ProposalReference?: null,
      voteType?: null
    ): TypedEventFilter<
      [string, string, string, number],
      {
        AetherDAO: string;
        DAOMember: string;
        ProposalReference: string;
        voteType: number;
      }
    >;
  };

  estimateGas: {
    finalizeProposal(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProposal(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getProposalExpiry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalReference(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalResolution(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalVotes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalActive(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitProposal(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voteOnProposal(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finalizeProposal(
      arg0: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalExpiry(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalReference(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalResolution(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalStatus(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalVotes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalActive(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberVote(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProposal(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voteOnProposal(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
