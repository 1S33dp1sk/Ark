/// atp \\\
@-Protocol

#ifndef __ATP__H
	#define __ATP__H 1
	#include "_512.h"

	#define __AT_DEFINED '@'
	#if __AT_DEFINED!=64
		#define AT_DEFINED 64
	#else
		#define AT_DEFINED __AT_DEFINED
	#endif
	
	#define ATP_FLAG_START 0x1
	#define ATP_FLAG_FS 0x2
	#define ATP_FLAG_IEPS 0x3
	#define ATP_FLAG_ES 0x4
	#define ATP_FLAG_IS 0x5
	#define ATP_FLAG 0x10
	#define ATP_FLAG_INTRPT 0x1f
	#define ATP_FLAG_C 0x100
	#define ATP_FLAG_HANDLER 261
	#define ATP_FLAG_INDEXER 228
	#define ATP_FLAG_PAYLD 273

	#define __PASS_MAX_D 24
	#define __PASS_MID_D 16
	#define __PASS_MIN_D 8

	#define __PASS_MIN_C 4
	#define dcharms_rwings __PASS_MIN_C
	#define __LBB_BASE_LEN (ulong)str_rwings(d_atlbb)

	#define HTTP_ACCEPT http_response(200, "OK")
	#define HTTP_SWITCH http_response(101, "Switching Protocols")
	#define HTTP_FORBID http_response(404, "Forbidden")

	#define ATP_SPEC_SIZE (__PASS_MIN_D<<0x3)
	#define ATP_BUFFER_SIZE (ATP_SPEC_SIZE<<0x3)
	#define ATP_BACKLOG 10 // instances of the same id
	#define ATP_PORT "9999" // The common ATP port
	#define __ATP_ENV "="
	#define __ATP_KEY ":"
	#define __ATP_AT "@"
	#define __ATP_AE "Aether(cid)"
	#define __ATP_A4 "localhost"
	#define __ATP_A6 "::1"

	#define __read_hash__ ((char const *)hashof(0, "read\0", 4))
	#define __write_hash__ ((char const *)hashof(0, "write\0", 4))
	#define __execute_hash__ ((char const *)hashof(0, "execute\0", 4))
	#define __connect_hash__ ((char const *)hashof(0, "connect\0", 4))
	#define __send_hash__ ((char const *)hashof(0, "send\0", 4))
	#define __listen_hash__ ((char const *)hashof(0, "listen\0", 4))


	#define PLD_MASKED(x)   x&10000000
	#define PLD_SIZE(x)     x&1111111
	#define FRAME_FIN(x)    x&1
	#define FRAME_RSV1(x)   x&01000000
	#define FRAME_RSV2(x)   x&00100000
	#define FRAME_RSV3(x)   x&00010000
	#define FRAME_OPCODE(x) x&00001111

	#define srwings(x) str_rwings(x)

	#define __p_args(p) ((void *)(&(p.args)))
	#define p_args(p) ((char const *)(p.args))
	#define _p_args_len(p) ((ulong)(str_rwings(p_args(p))))
	#define pst_args(p) ((char const *)(p->args))
	#define pst_args_len(p) ((ulong)str_rwings(pst_args(p)))

	#define __p_pointer(p) ((void *)(&(p.pointer)))
	#define p_pointer(p) ((char const *)((p.pointer)))
	#define _p_pointer_len(p) ((ulong)(str_rwings(p_pointer(p))))

	#define __p_interpreter(p) ((void *)(&(p.interpreter)))
	#define p_interpreter(p) ((char const *)(p.interpreter))
	#define _p_interpreter_len(p) ((ulong)(str_rwings(p_interpreter(p))))

	#define socket_fd(x) (ulong)(x.aip_sockfd)
	#define sock_fd(x) (ulong)(x->aip_sockfd)
	#define socket_len(x) (ulong)(x.aip_socklen)
	#define sock_len(x) (ulong)(x->aip_socklen)
	#define socket_staddr(x) (struct sockaddr *) sock_aip_to_sa(&x)

	#define addr_args(x) ((x->ptr),(x->addr), #x)
    #define len_strze(x) (((ulong)x)*(sizeof(char)))

	#define R_INDEXER(x,y) {\
		if(x==y) { refer_index(x,#x,#x); }\
		else { refer_index(x,y,#x); }\
	}
	#define hash_follow(l,...) (char const *)hashof(l, #__VA_ARGS__, str_rwings(#__VA_ARGS__))
	#define __switcher(x) (int)(x->switcher)
	#define __protocol__(x) void *res;\
		switch(__switcher(x)){\
			case __lbb_none__:\
				return __no_entry__(x);\
			case __lbb_charms__: \
				return __field__(x);\
			case __lbb_yeild__:\
				return __w3__(x);\
			case __lbb_info__:\
				return __info__(x);\
			case __lbb_variable__:\
				return __pointer__(x);\
			case atp_base:\
				return __point__(x);\
			case atp_return:\
				return ixr_run(x);\
			case atp_retain:\
				return ixr_save(x);\
			case atp_retreive:\
				return ixr_collect(x);\
			default: \
				return 0;\
		}\

	#ifndef __ATP__C
		static ulong step_c=0;
		static ulong points_c=0;
		static ulong p_pid;
		static ulong c_pid;
	#define __ATP__C 1
	#endif

	// int mor(void *args);
	// int les(void *args);

	// void __arcpid();
	// void __arcfork();
	// void __arcsok();
	// void *__arcstart(void *__arc);
	// #define start_atp() atp_step(256);

	// void *__into__(into_st *into_p);
	// void *__pia__(pia_st *pia_p);
	// void *__arcstp(stp_size __stpsize);

	// int __dgetfd(char const *__fpath);
	// int get_atp_type(char const *proto_call);
	// int get_mstat(char const *__fpath, m_stat *mst);
	// void log_mstat(m_stat *mst);

	// // ulong str_rwings(char const *string);
	// // char *str_a4offset(char const *__string, ulong __offset);
	// // char *str_a4woffset(char const *__string, ulong __offset);
	// // char *str_b4offset(char const *__string, ulong __offset);
	// // char *str_b4eoffset(char const *__string, ulong __offset);
	// // ulong sep_offset(char const *__string, char *__seperator);

	// char const *hashof(unsigned level, void const *to_hash, ulong hash_size);
	// char const *fhashof(unsigned level, char const *__tohash);
	// unsigned int pack(uchar *bufin, char const *buffmt, ...);

	// ixr_h*ixr_get(into_st *into_var);
	// ixr_h*ixr_set(into_st *into_var);
	// ixr_h*ixr_atp(into_st *into_call);
	// ixr_h*ixr_run(into_st *into_data);
	// ixr_h*ixr_save(into_st *into_data);
	// ixr_h*ixr_collect(into_st *into_request);

	// into_st*__info__(atp_act*act);
	// into_st*__point__(atp_act*act_point);
	// into_st*__pointer__(atp_act*act_pointer);
	// into_st*__atp__(atp_act*act_protocol);
	// into_st*__w3__(atp_act*act_lbb);
	// into_st *dcloud(atp_act *_0xa_action);

	#define __ATP__H 2
#endif

