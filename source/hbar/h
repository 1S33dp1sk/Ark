
#ifndef __HBAR__H
    #define __HBAR__H 1
    #include "_512.h"

    #define F_BYTE(_) _&0x0f
    #define L_BYTE(_) _&0xf0 
    #define __CHAR_ZERO '0'
    #define __CHAR_NULL '\0'
    #define __CHAR_ALPH_A 'a'

    #if defined(_MSC_VER)
        #define __sha3_const(x) x
    #else
        #define __sha3_const(x) x##L
    #endif
    /**
     * Thanks for the all the contributions and good work from 
     * the keccak team http://keccak.noekeon.org/
     * and brainhub team crypto@brainhub.org 
     * for their combined efforts on the implementation of the `sha-3` hash.
     *
    **/
    #ifndef __keccak__base
        static const ullong keccakf_rndc[24] = {
            __sha3_const( 0x0000000000000001UL ), __sha3_const( 0x0000000000008082UL ),
            __sha3_const( 0x800000000000808aUL ), __sha3_const( 0x8000000080008000UL ),
            __sha3_const( 0x000000000000808bUL ), __sha3_const( 0x0000000080000001UL ),
            __sha3_const( 0x8000000080008081UL ), __sha3_const( 0x8000000000008009UL ),
            __sha3_const( 0x000000000000008aUL ), __sha3_const( 0x0000000000000088UL ),
            __sha3_const( 0x0000000080008009UL ), __sha3_const( 0x000000008000000aUL ),
            __sha3_const( 0x000000008000808bUL ), __sha3_const( 0x800000000000008bUL ),
            __sha3_const( 0x8000000000008089UL ), __sha3_const( 0x8000000000008003UL ),
            __sha3_const( 0x8000000000008002UL ), __sha3_const( 0x8000000000000080UL ),
            __sha3_const( 0x000000000000800aUL ), __sha3_const( 0x800000008000000aUL ),
            __sha3_const( 0x8000000080008081UL ), __sha3_const( 0x8000000000008080UL ),
            __sha3_const( 0x0000000080000001UL ), __sha3_const( 0x8000000080008008UL )
        };
        static const ulong keccakf_rotc[24] = {
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62,
            18, 39, 61, 20, 44
        };
        static const ulong keccakf_piln[24] = {
            10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20,
            14, 22, 9, 6, 1
        };
    #define __keccak__base 1
    #endif

    #define __size_u64 sizeof(ullong)
    #define __sha3_k_sponge_w (((1600)/8)/__size_u64) //bits to byte
    #define __sha3_k_use_flag 0x80000000 // flag for PURE keccak
    #define __sha3_cw(x) ((x)&(~__sha3_k_use_flag))
    #define __sha3_assert(rcond)
    #define __sha3_trace(fmt,...)
    #define __sha3_trace_buf(format,buf,l)
    #define sha3_init256(p) sha3_init(p,256)
    #define sha3_init384(p) sha3_init(p,384)
    #define sha3_init512(p) sha3_init(p,512)
    #define byte_to_hex __btoh
    #define hash_to_strl h_str_tl 
    #define hash_to_string __htostr
    #define hbar_str __s_hash

    struct __sha3_context {
        ulong saved;             
                // remainder of input string that we didn't consume yet
        union {                     
            ulong s[__sha3_k_sponge_w];
            uchar sb[__sha3_k_sponge_w*8];
        } u;                        
                // keccak's state 
        ulong byte_idx;         
                // 0..7--the next byte after the set one (starts from 0; 0--none are buffered) 
        ulong word_idx;         
                // 0..24--the next word to integrate input (starts from 0)
        ulong cap_words;
                // the double size of the hash output in words (e.g. 16 for Keccak 512)
    };
    typedef struct __sha3_context sha3_context;

    static sha3_context __sha3;

    #define __size_sha3_context sizeof(struct __sha3_context)

    #ifndef __sha3_rot_l_64
        #define __sha3_rot_l_64(x, y) (((x) << (y)) | ((x) >> ((__size_u64*8) - (y))))
    #endif

    #undef get16bits
    #if (defined(__GNUC__) && defined(__i386__)) || defined(__WATCOMC__) \
    || defined(_MSC_VER) || defined (__BORLANDC__) || defined (__TURBOC__)
        #define get16bits(d) (*((const ulong *)(d)))
    #endif
    #if !defined (get16bits)
        #define get16bits(d) ((((ulong) (((const uchar *)(d))[1]))<<8)\
                            +(ulong) (((const uchar *) (d))[0]))
    #endif


    void __btoh(uchar __c, uc __s);
    void h_str_tl(char *__, uchar *__hash, ulong __len);
    void __htostr(char *__str, uchar *hash);
    char *__s_hash(char *__key, char *__hashkey);
    ulong blaz_hash(char const *__data);
    static void keccakf(ulong s[25]);
    sha3_r sha3_init(void *p,ulong bit_size);
    sha3_f sha3_set_flags(void *p,sha3_f flags);
    void sha3_update(void *p,void const *buf_in,ulong len);
    void const *sha3_finalize(void *ctx_p);
    sha3_r sha3_hash_buffer(ulong bit_size,sha3_f cfg,const void *in,ulong in_bytes,void *out,ulong out_bytes);

    const char *zero_address(ulong level);
    void *__generate_lock(char const *__hash, ulong __hlen);
    char const *hashof (ulong level, void const*to_hash, ulong the_hash_size);
    uchar const *hash (ulong level, void const *to_hash, ulong the_hash_size);
    ulong hash8 (ulong level, void const *to_hash, ulong the_hash_size);
    ullong  hash24 (ulong level, void const *to_hash, ulong the_hash_size);
    char const *fhashof(ulong level, char const *to_hash);
    char const *fdhashof(ulong level, ulong fd, ulong filesize);
    uchar const *fhash(ulong level, char const *to_hash);
    ulong fhash4 (ulong level, char const *to_hash);
    ulong fhash8 (ulong level, char const *to_hash);
    ulong fhash16 (ulong level, char const *to_hash);

    #define __HBAR__H 2
#endif
