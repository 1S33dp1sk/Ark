#ifndef __ENK__H
    #include "utypes.h"
    #include <stdio.h>
    #include <stdarg.h>
    #include <string.h>
    #include <ctype.h>
    #include <stdint.h>
    #include <unistd.h>
    #include <stdlib.h>

    #define packi16 pack_i_16
    #define packi32 pack_i_32
    #define packi64 pack_i_64
    #define unpacki16 unpack_i_16
    #define unpacki32 unpack_i_32
    #define unpacki64 unpack_i_64
    #define unpacki128 unpack_i_128
    #define unpacku16 unpack_u_16
    #define unpacku32 unpack_u_32

    #define packu16(ubuf,num) (enc_unum(1,ubuf,num))
    #define packu32(ubuf,num) (enc_unum(3,ubuf,num))
    #define packu64(ubuf,num) (enc_unum(7,ubuf,num))
    #define unpacku64(x) ((ulong *)unpack_u_64(x))

    unsigned int pack(uchar *buf,char const *fmt,...);
    void unpack(uchar *buf,char const *fmt,...);

    // various encodings
    void enc_unum(size_t base,uchar *buf,ulong i);
    void enc_brnum(size_t base,size_t roof,uchar *buf,ulong *i);

    //packing
    void pack_i_16(uchar *buf,uns i);
    void pack_i_32(uchar *buf,unsigned long int i);
    void pack_i_64(uchar *buf,unsigned long long int i);

    //unpacking
    uns unpack_u_16(uchar *buf);
    int unpack_i_16(uchar *buf);
    unsigned long int unpack_u_32(uchar *buf);
    long int unpack_i_32(uchar *buf);
    ulong unpack_u_64(uchar *buf);
    long long int unpack_i_64(uchar *buf);


    #define NOFB_TYPE(x) \
        _Generic((x), \
            signed char: (char)x, \
            unsigned char:(uchar)x, \
            int:(int)x, \
            unsigned int:(uns)x, \
            long int:(ulong)x, \
            unsigned long int:(ulong)x, \
            long long int:(tlong)x, \
            unsigned long long int:(tlong)x, \
            default:NULL)
    

  
    #define LBB_OUT_FMT(__) \
        _Generic((__), \
            void * : void *,\
            char * : char *,\
            const char *: const char *,\
            default: ulong*)

    #define __ENK__H 1
#endif