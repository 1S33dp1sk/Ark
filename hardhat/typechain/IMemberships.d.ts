/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMembershipsInterface extends ethers.utils.Interface {
  functions: {
    "holderThreshold()": FunctionFragment;
    "isDAOMember(address)": FunctionFragment;
    "isDAOPartner(address)": FunctionFragment;
    "isHolder(address)": FunctionFragment;
    "isNodeOwner(address)": FunctionFragment;
    "isTreasuryPartner(address)": FunctionFragment;
    "membershipFor(address,uint8)": FunctionFragment;
    "nodeThreshold()": FunctionFragment;
    "treasuryThreshold()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "holderThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isDAOMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDAOPartner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isHolder", values: [string]): string;
  encodeFunctionData(functionFragment: "isNodeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTreasuryPartner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipFor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryThreshold",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "holderThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDAOMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDAOPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isHolder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTreasuryPartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "membershipFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryThreshold",
    data: BytesLike
  ): Result;

  events: {};
}

export class IMemberships extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMembershipsInterface;

  functions: {
    holderThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    isDAOMember(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDAOPartner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isHolder(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isNodeOwner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTreasuryPartner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    membershipFor(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodeThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  holderThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  isDAOMember(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isDAOPartner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isHolder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isNodeOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isTreasuryPartner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  membershipFor(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    holderThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isDAOMember(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isDAOPartner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isHolder(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isNodeOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isTreasuryPartner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    membershipFor(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    holderThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    isDAOMember(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDAOPartner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isHolder(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isNodeOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTreasuryPartner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    membershipFor(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryThreshold(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    holderThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDAOMember(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDAOPartner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isHolder(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNodeOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTreasuryPartner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    membershipFor(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
