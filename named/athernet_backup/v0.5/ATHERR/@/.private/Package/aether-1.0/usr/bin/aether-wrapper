#!/bin/bash



# V2.0

# define colors for a cool ux
NO_COLOR='\033[0m'
PURPLE='\033[1;94m'
WHITE='\033[1;37m'
RED='\033[0;31m'
GREEN='\033[1;32m'

# check-get
_CG_AETHER_FILE() {
    for FILE_NAME in ./.*; do
        if [[ $(basename ${FILE_NAME}) == .aether ]]; then
            _AETHER_FILE=$(cat .aether)
            break
        fi
    done
    if [[ -z ${_AETHER_FILE} ]]; then
        printf  "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} : No aether file found.\n"
        exit
    fi
}

# exec not successful
_NOT_SUCCESSFUL() {
    printf  "${PURPLE}Aether${NO_COLOR} :: ${RED}ERROR${NO_COLOR} : __CLIENT__ EXIT STATUS NOT 0 -> ${WHITE}0xAether client cannot execute non-zero exit codes${NO_COLOR}\n"
    exit ${EXIT_STATUS}  # exit the bash script with the same status
}

# exec success
_SUCCESSFUL() {
    _AETHER_MD5
    printf "${PURPLE}Aether${NO_COLOR} :: ${GREEN}COMPLETED${NO_COLOR} -> ${WHITE}Executed ${_CALLER} gracefully${NO_COLOR}.\n"
    exit 0
}

# check if 
# .aether MD5SUM == aether MD5SUM
_CHECK_MD5() {
    BASE_HASH=$(aether-reader rd MD5SUM)
    HASH_BASE_MD5SUM
    if [[ "${BASE_HASH}" != "${HASH_BASE_MD5SUM}" ]]; then
        printf "MD5SUM does not match"
        exit 2
    fi
}

# register aether MD5SUM on 
#.aether
_AETHER_MD5() {
    HASH_BASE_MD5SUM
    if [[ ! -z ${HASH_BASE} ]]; then
        aether-reader chg MD5SUM ${HASH_BASE}
        printf "MD5 aethered\n ${HASH_BASE}"
        exit 0
    else
        printf "cannot determine checksum are you in the right dir?"
        exit 1
    fi
}

# hash the tmp.md5 again for a 
# single-liner
HASH_BASE_MD5SUM() {
    find -type f -exec md5sum "{}" + > aether.md5
    HASH_BASE=$(md5sum aether.md5)
    rm aether.md5
}

# load all dirs and files
_LOAD_FROM_PATH() {

    _CONNECT_TO=$(aether-reader rd CONNECT_TO)
    if [[ -z ${_CONNECT_TO} ]]; then
        printf  "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} : Misconfiguration -> ${GREY}.aether file missing <CONNECT_TO>${NC}\n"
        exit
    fi
    CONNECT_TO=()
    # hard linked here, 
    # no access to other filesystems
    for CTO in ${_CONNECT_TO//,/ }; do
        _CTO_PATH="${AETHER_PATH}/${CTO}"
        if [[ -d ${_CTO_PATH} ]]; then 
            ln -s ${_CTO_PATH} .
        fi
    done

    # context here should be limited to a user
    # this way it will be easier to contain any
    # sys-wide calls.
    _CALLER=$(aether-reader rd CALLER)
    if [[ -z ${_CALLER} ]]; then
        printf  "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} : Misconfiguration -> ${GREY}.aether file missing <CALLER>${NC}\n"
        exit
    fi  
    ./${_CALLER}
    EXIT_STATUS=$?
    if [[ ${EXIT_STATUS} -ne 0 ]]; then
        _NOT_SUCCESSFUL
    else
        _SUCCESSFUL
        _SAVE_FROM_PATH
    fi
}

# save from path
_SAVE_FROM_PATH() {
    LINKED_DIRS=""
    for _D in ./*; do
        _BASE_LINKED=$(basename ${_D})
        _LINKED=$(realpath ${_BASE_LINKED})
        if [[ ! -z ${_LINKED} ]] && [[ -d "${AETHER_PATH}/${_BASE_LINKED}" ]]; then
            LINKED_DIRS="${LINKED_DIRS},$(basename ${_LINKED})"
        fi
    done
    aether-reader chg CONNECT_TO ${LINKED_DIRS:1}
}

# decode the aether file
_DECODE_AETHER_FILE() {
    AETHER_PATH=$(aether-reader rd PATH)
    if [[ -z ${AETHER_PATH} ]]; then
        printf  "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} : Misconfiguration -> ${GREY}.aether file missing <PATH>${NC}\n"
        exit
    else
        for FILENAME in ${AETHER_PATH}/*; do if [[ -f ${FILENAME} ]]; then ln ${FILENAME} .; fi done
    fi
}

_CG_AETHER_FILE
_DECODE_AETHER_FILE
_LOAD_FROM_PATH











## VERSION I 
#!/bin/bash

# # define colors for a cool ux
# NC='\033[0m'
# VIOLET='\033[1;94m'
# GREY='\033[1;37m'
# RED='\033[0;31m'
# GREEN='\033[1;32m'

# # execute the script with 
# # generality and output the exit
# # status code
# python3 $@ << 'EOF'
# from sys import exit
# #exit codes from the exec and the bash script
# #acts as a kind of mutex(mutual exclusion object)
# exit(0x0A)

# EOF

# EXIT_STATUS=$?

# if [ ${EXIT_STATUS} -ne 0 ]; then
#     printf  "${VIOLET}Aether${NC} :: ${RED}ERROR${NC} : __CLIENT__ EXIT STATUS NOT 0 -> ${GREY}0xAether client cannot execute non-zero exit codes${NC}\n"
#     exit ${EXIT_STATUS}  # exit the bash script with the same status
# fi
# SCRPT_NAME=$1
# BASE_NAME=$(basename $SCRPT_NAME)
# EXEC_NAME=${BASE_NAME%%.*}
# printf "${VIOLET}Aether${NC} :: ${GREEN}COMPLETED${NC} -> ${GREY}Executed ${EXEC_NAME} gracefully${NC}.\n"
