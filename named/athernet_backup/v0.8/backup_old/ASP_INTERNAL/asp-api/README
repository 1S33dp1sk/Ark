##################################### This project is about K-AUTH/Auth3.0 ############################################

Attaching a K-Auth to a project will make it virtually impossible for attackers to compromise the system. It is
soft seperated and hard seperated from the main project directories. While using a systematic flow, a service bus is 
used to keep data flowing between all nodes of the system for information activites where only K-updates will flow 
into the eventful bus. For uneventful updates the particular user session only will remark and update miscillanious
changes done by the user.


The main flow is as follows:



			          ## MAIN INTERNAL COMMUNICATION CHANNEL ##
#Client												Server

# MAIN-INTERNAL SESSION START ----------------------------------------------------------------> << AUTH EVAL
# USER_KEY VE init     -----------------------------------------------------------------------> << Directory LIVE
# USER_KEY ACTION      -----------------------------------------------------------------------> << VE execute 
# USER_KEY OBSERVE     -----------------------------------------------------------------------> << KEEP_ALIVE OR DIE?
# USER_KEY ACTION_TIME -----------------------------------------------------------------------> << Directory TIME_ACTION

########################################################################################################################





		            ## SUB-INTERNAL SUB-EXTERNAL COMMUNICATION CHANNEL ##
#Client												Server

# SUB-MAIN connection start ------------------------------------------------------------->> < EVAL AUTH
# Send ID CARD -----------------------------------------------------------------------------< Retrieve Unique_ID3
# UNIQUE_ID3 MATCHING WITH K-AUTH ------------------------------------------------------->> < KAUTH CREATE/MANAGE
# MANAGE/CREATE KEY ------------------------------------------------------------------------< Start service for Unique_ID3
# Request UNIQUE_ID3 data --------------------------------------------------------------->> < Read Request info
# ACCESS UNIQUE_ID3 data ---------------------------------------------------------------->> < START SESSION UNIQUE_ID3 
 
#######################################################################################################################



			             ## MAIN EXTERNAL COMMUNICATION CHANNEL ##
#Client												Server

# TLS AND SSL handshake ----------------------------------------------------------------->> < MAIN-EXTERNAL INIT
# Send headers for connection  ---------------------------------------------------------->> < EVALUATE HEADERS
# Recieve auth tokens > <<------------------------------------------------------------------- SEND AUTH TOKEN 
# Request Session start ----------------------------------------------------------------->> < SEND SESSION ID
# Request SUB-MAIN connection  ---------------------------------------------------------->> < EVAL ALL
# Transfer to SUB-MAIN ------------------------------------------------------------------>> < NEW SUB-MAIN CONNECTION
 
#####################################################################################################################



##################################
#                                #
#  3 projects for authenication: #
#                                #
#  1- EXTERNAL                   #
#  2- SUB                        #
#  3- INTERNAL                   #
#                                #
##################################
#                                #
#   2 projects for handling:     #
#			         #
#  1-`COLLECTION GIT`            #
#  2- TEMPLATE_GIT	         #
#                                #
##################################
#                                #
#  2 main services:              #
#                                #
#  1- EVENTFUL K-Updates         #
#  2- UNEVENTFUL updates         #
#                                #
##################################

































IF ID_CARD && KEY && feasible:
	Create()
	Manage()

where Create() will call git init USER_ID.git

and Manage() will call a * to the specified USER_KEY.git


With Manage(); the `COLLECTION GIT` will create a service for this particular one to be online 

online here means a `context` is created and the USER_KEY.git is binded to main for updates

At its core, the binding will result in the user updating their own values which will update the database

only if it is marked as a K-Update, if the user updates or changes anything that is not a K-Update which is allowed

to its full extent, the `COLLECTION GIT` will not be affected. 

Making it virtually impossible for USER_ATTACKER to supply any malicious injections as the `COLLECTION GIT` will

only read K-Updates which can be boiled down to super specific values and instructions.

	
