/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PhaseInterface extends utils.Interface {
  functions: {
    "_accessPath()": FunctionFragment;
    "_caller()": FunctionFragment;
    "_data()": FunctionFragment;
    "_exec()": FunctionFragment;
    "_sender()": FunctionFragment;
    "testPhase(bytes32,bytes,address,address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_accessPath"
      | "_caller"
      | "_data"
      | "_exec"
      | "_sender"
      | "testPhase"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_accessPath",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_caller", values?: undefined): string;
  encodeFunctionData(functionFragment: "_data", values?: undefined): string;
  encodeFunctionData(functionFragment: "_exec", values?: undefined): string;
  encodeFunctionData(functionFragment: "_sender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testPhase",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_accessPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_caller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_exec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_sender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testPhase", data: BytesLike): Result;

  events: {
    "Phase(bytes32,bytes,address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Phase"): EventFragment;
}

export interface PhaseEventObject {
  AccessPath: string;
  data: string;
  Sender: string;
  Caller: string;
  Exec: string;
}
export type PhaseEvent = TypedEvent<
  [string, string, string, string, string],
  PhaseEventObject
>;

export type PhaseEventFilter = TypedEventFilter<PhaseEvent>;

export interface Phase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PhaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _accessPath(overrides?: CallOverrides): Promise<[string]>;

    _caller(overrides?: CallOverrides): Promise<[string]>;

    _data(overrides?: CallOverrides): Promise<[string]>;

    _exec(overrides?: CallOverrides): Promise<[string]>;

    _sender(overrides?: CallOverrides): Promise<[string]>;

    testPhase(
      aP: PromiseOrValue<BytesLike>,
      da: PromiseOrValue<BytesLike>,
      se: PromiseOrValue<string>,
      ca: PromiseOrValue<string>,
      exec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _accessPath(overrides?: CallOverrides): Promise<string>;

  _caller(overrides?: CallOverrides): Promise<string>;

  _data(overrides?: CallOverrides): Promise<string>;

  _exec(overrides?: CallOverrides): Promise<string>;

  _sender(overrides?: CallOverrides): Promise<string>;

  testPhase(
    aP: PromiseOrValue<BytesLike>,
    da: PromiseOrValue<BytesLike>,
    se: PromiseOrValue<string>,
    ca: PromiseOrValue<string>,
    exec: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _accessPath(overrides?: CallOverrides): Promise<string>;

    _caller(overrides?: CallOverrides): Promise<string>;

    _data(overrides?: CallOverrides): Promise<string>;

    _exec(overrides?: CallOverrides): Promise<string>;

    _sender(overrides?: CallOverrides): Promise<string>;

    testPhase(
      aP: PromiseOrValue<BytesLike>,
      da: PromiseOrValue<BytesLike>,
      se: PromiseOrValue<string>,
      ca: PromiseOrValue<string>,
      exec: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Phase(bytes32,bytes,address,address,bytes32)"(
      AccessPath?: null,
      data?: null,
      Sender?: PromiseOrValue<string> | null,
      Caller?: PromiseOrValue<string> | null,
      Exec?: null
    ): PhaseEventFilter;
    Phase(
      AccessPath?: null,
      data?: null,
      Sender?: PromiseOrValue<string> | null,
      Caller?: PromiseOrValue<string> | null,
      Exec?: null
    ): PhaseEventFilter;
  };

  estimateGas: {
    _accessPath(overrides?: CallOverrides): Promise<BigNumber>;

    _caller(overrides?: CallOverrides): Promise<BigNumber>;

    _data(overrides?: CallOverrides): Promise<BigNumber>;

    _exec(overrides?: CallOverrides): Promise<BigNumber>;

    _sender(overrides?: CallOverrides): Promise<BigNumber>;

    testPhase(
      aP: PromiseOrValue<BytesLike>,
      da: PromiseOrValue<BytesLike>,
      se: PromiseOrValue<string>,
      ca: PromiseOrValue<string>,
      exec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _accessPath(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _caller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _exec(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _sender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testPhase(
      aP: PromiseOrValue<BytesLike>,
      da: PromiseOrValue<BytesLike>,
      se: PromiseOrValue<string>,
      ca: PromiseOrValue<string>,
      exec: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
