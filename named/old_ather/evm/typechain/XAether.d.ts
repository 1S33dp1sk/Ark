/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface XAetherInterface extends ethers.utils.Interface {
  functions: {
    "decodeBlk(bytes)": FunctionFragment;
    "decodeTxn(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeBlk",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeTxn",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "decodeBlk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decodeTxn", data: BytesLike): Result;

  events: {};
}

export class XAether extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: XAetherInterface;

  functions: {
    decodeBlk(
      _aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string] & {
          _masterHash: string;
          _txnCount: BigNumber;
          _aetheringAddress: string;
        },
        string[]
      ]
    >;

    decodeTxn(
      _aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string] & {
          _from: string;
          _to: string;
          _select: string;
          _args: string;
        }
      ] & {
        _aetherTxn: [string, string, string, string] & {
          _from: string;
          _to: string;
          _select: string;
          _args: string;
        };
      }
    >;
  };

  decodeBlk(
    _aBlock: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber, string] & {
        _masterHash: string;
        _txnCount: BigNumber;
        _aetheringAddress: string;
      },
      string[]
    ]
  >;

  decodeTxn(
    _aTxn: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      _from: string;
      _to: string;
      _select: string;
      _args: string;
    }
  >;

  callStatic: {
    decodeBlk(
      _aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string] & {
          _masterHash: string;
          _txnCount: BigNumber;
          _aetheringAddress: string;
        },
        string[]
      ]
    >;

    decodeTxn(
      _aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        _from: string;
        _to: string;
        _select: string;
        _args: string;
      }
    >;
  };

  filters: {};

  estimateGas: {
    decodeBlk(
      _aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeTxn(_aTxn: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeBlk(
      _aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeTxn(
      _aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
