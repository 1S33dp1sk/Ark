/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AetherProxyInterface extends ethers.utils.Interface {
  functions: {
    "aetherBonds()": FunctionFragment;
    "aetherDAO()": FunctionFragment;
    "aetherFactory()": FunctionFragment;
    "aetherHUB()": FunctionFragment;
    "aetherID()": FunctionFragment;
    "aetherKeeper()": FunctionFragment;
    "aetherRouter()": FunctionFragment;
    "aetherToken()": FunctionFragment;
    "getAetherAddress(uint256)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(uint256,address,address,bool)": FunctionFragment;
    "proxyType()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aetherBonds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherDAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherHUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "aetherID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAetherAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "proxyType", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "aetherBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherHUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aetherID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAetherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxyType", data: BytesLike): Result;

  events: {};
}

export class AetherProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AetherProxyInterface;

  functions: {
    aetherBonds(overrides?: CallOverrides): Promise<[string]>;

    aetherDAO(overrides?: CallOverrides): Promise<[string]>;

    aetherFactory(overrides?: CallOverrides): Promise<[string]>;

    aetherHUB(overrides?: CallOverrides): Promise<[string]>;

    aetherID(overrides?: CallOverrides): Promise<[BigNumber]>;

    aetherKeeper(overrides?: CallOverrides): Promise<[string]>;

    aetherRouter(overrides?: CallOverrides): Promise<[string]>;

    aetherToken(overrides?: CallOverrides): Promise<[string]>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contractAddress: string }>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    "initialize(uint256,address,address,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _proxy_: string,
      _delegate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(uint256,address,bytes,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _contract_: BytesLike,
      _delegate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxyType(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  aetherBonds(overrides?: CallOverrides): Promise<string>;

  aetherDAO(overrides?: CallOverrides): Promise<string>;

  aetherFactory(overrides?: CallOverrides): Promise<string>;

  aetherHUB(overrides?: CallOverrides): Promise<string>;

  aetherID(overrides?: CallOverrides): Promise<BigNumber>;

  aetherKeeper(overrides?: CallOverrides): Promise<string>;

  aetherRouter(overrides?: CallOverrides): Promise<string>;

  aetherToken(overrides?: CallOverrides): Promise<string>;

  getAetherAddress(
    contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  implementation(overrides?: CallOverrides): Promise<string>;

  "initialize(uint256,address,address,bool)"(
    _acid_: BigNumberish,
    _router_: string,
    _proxy_: string,
    _delegate_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(uint256,address,bytes,bool)"(
    _acid_: BigNumberish,
    _router_: string,
    _contract_: BytesLike,
    _delegate_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxyType(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    aetherBonds(overrides?: CallOverrides): Promise<string>;

    aetherDAO(overrides?: CallOverrides): Promise<string>;

    aetherFactory(overrides?: CallOverrides): Promise<string>;

    aetherHUB(overrides?: CallOverrides): Promise<string>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<string>;

    aetherRouter(overrides?: CallOverrides): Promise<string>;

    aetherToken(overrides?: CallOverrides): Promise<string>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    implementation(overrides?: CallOverrides): Promise<string>;

    "initialize(uint256,address,address,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _proxy_: string,
      _delegate_: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initialize(uint256,address,bytes,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _contract_: BytesLike,
      _delegate_: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxyType(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    aetherBonds(overrides?: CallOverrides): Promise<BigNumber>;

    aetherDAO(overrides?: CallOverrides): Promise<BigNumber>;

    aetherFactory(overrides?: CallOverrides): Promise<BigNumber>;

    aetherHUB(overrides?: CallOverrides): Promise<BigNumber>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    aetherRouter(overrides?: CallOverrides): Promise<BigNumber>;

    aetherToken(overrides?: CallOverrides): Promise<BigNumber>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    "initialize(uint256,address,address,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _proxy_: string,
      _delegate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(uint256,address,bytes,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _contract_: BytesLike,
      _delegate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxyType(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aetherBonds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherHUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialize(uint256,address,address,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _proxy_: string,
      _delegate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,address,bytes,bool)"(
      _acid_: BigNumberish,
      _router_: string,
      _contract_: BytesLike,
      _delegate_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxyType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
