/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HubTestInterface extends ethers.utils.Interface {
  functions: {
    "ablockbind(uint256,bytes32,uint256,bytes20,uint256)": FunctionFragment;
    "atxnreceive(bytes16)": FunctionFragment;
    "atxnrequest(bytes16,bool)": FunctionFragment;
    "noderegistered(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ablockbind",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "atxnreceive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "atxnrequest",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "noderegistered",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ablockbind", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "atxnreceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "atxnrequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noderegistered",
    data: BytesLike
  ): Result;

  events: {
    "ABlockBind(uint256,bytes32,uint256,bytes20,uint256)": EventFragment;
    "ATxnReceive(bytes16)": EventFragment;
    "ATxnRequest(bytes16,bool)": EventFragment;
    "NodeRegistered(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ABlockBind"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ATxnReceive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ATxnRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
}

export type ABlockBindEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber] & {
    ABlockNum: BigNumber;
    ABlockMasterHash: string;
    ABlockTxnCount: BigNumber;
    ABlockAethering: string;
    NBlockNum: BigNumber;
  }
>;

export type ATxnReceiveEvent = TypedEvent<[string] & { ATxnHash: string }>;

export type ATxnRequestEvent = TypedEvent<
  [string, boolean] & { ATxnHash: string; ATxnResult: boolean }
>;

export type NodeRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    ANodeAddress: string;
    ANodePos: BigNumber;
    ANodesPtr: BigNumber;
  }
>;

export class HubTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HubTestInterface;

  functions: {
    ablockbind(
      k1: BigNumberish,
      k2: BytesLike,
      k3: BigNumberish,
      k4: BytesLike,
      k5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    atxnreceive(
      k1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    atxnrequest(
      k1: BytesLike,
      k2: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    noderegistered(
      k1: string,
      k2: BigNumberish,
      k3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ablockbind(
    k1: BigNumberish,
    k2: BytesLike,
    k3: BigNumberish,
    k4: BytesLike,
    k5: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  atxnreceive(
    k1: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  atxnrequest(
    k1: BytesLike,
    k2: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  noderegistered(
    k1: string,
    k2: BigNumberish,
    k3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ablockbind(
      k1: BigNumberish,
      k2: BytesLike,
      k3: BigNumberish,
      k4: BytesLike,
      k5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    atxnreceive(k1: BytesLike, overrides?: CallOverrides): Promise<void>;

    atxnrequest(
      k1: BytesLike,
      k2: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    noderegistered(
      k1: string,
      k2: BigNumberish,
      k3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ABlockBind(uint256,bytes32,uint256,bytes20,uint256)"(
      ABlockNum?: null,
      ABlockMasterHash?: null,
      ABlockTxnCount?: null,
      ABlockAethering?: null,
      NBlockNum?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        ABlockNum: BigNumber;
        ABlockMasterHash: string;
        ABlockTxnCount: BigNumber;
        ABlockAethering: string;
        NBlockNum: BigNumber;
      }
    >;

    ABlockBind(
      ABlockNum?: null,
      ABlockMasterHash?: null,
      ABlockTxnCount?: null,
      ABlockAethering?: null,
      NBlockNum?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        ABlockNum: BigNumber;
        ABlockMasterHash: string;
        ABlockTxnCount: BigNumber;
        ABlockAethering: string;
        NBlockNum: BigNumber;
      }
    >;

    "ATxnReceive(bytes16)"(
      ATxnHash?: null
    ): TypedEventFilter<[string], { ATxnHash: string }>;

    ATxnReceive(
      ATxnHash?: null
    ): TypedEventFilter<[string], { ATxnHash: string }>;

    "ATxnRequest(bytes16,bool)"(
      ATxnHash?: null,
      ATxnResult?: null
    ): TypedEventFilter<
      [string, boolean],
      { ATxnHash: string; ATxnResult: boolean }
    >;

    ATxnRequest(
      ATxnHash?: null,
      ATxnResult?: null
    ): TypedEventFilter<
      [string, boolean],
      { ATxnHash: string; ATxnResult: boolean }
    >;

    "NodeRegistered(address,uint256,uint256)"(
      ANodeAddress?: null,
      ANodePos?: null,
      ANodesPtr?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ANodeAddress: string; ANodePos: BigNumber; ANodesPtr: BigNumber }
    >;

    NodeRegistered(
      ANodeAddress?: null,
      ANodePos?: null,
      ANodesPtr?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ANodeAddress: string; ANodePos: BigNumber; ANodesPtr: BigNumber }
    >;
  };

  estimateGas: {
    ablockbind(
      k1: BigNumberish,
      k2: BytesLike,
      k3: BigNumberish,
      k4: BytesLike,
      k5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    atxnreceive(
      k1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    atxnrequest(
      k1: BytesLike,
      k2: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    noderegistered(
      k1: string,
      k2: BigNumberish,
      k3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ablockbind(
      k1: BigNumberish,
      k2: BytesLike,
      k3: BigNumberish,
      k4: BytesLike,
      k5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    atxnreceive(
      k1: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    atxnrequest(
      k1: BytesLike,
      k2: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    noderegistered(
      k1: string,
      k2: BigNumberish,
      k3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
