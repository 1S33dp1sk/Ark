/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ITransaction, ITransactionInterface } from "../ITransaction";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "TransactionReference",
        type: "bytes32",
      },
    ],
    name: "TransactionAccepted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "TransactionReference",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "ClaimSize",
        type: "uint256",
      },
    ],
    name: "TransactionClaimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "checkSV",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "collaterilize",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "gasMarkup",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class ITransaction__factory {
  static readonly abi = _abi;
  static createInterface(): ITransactionInterface {
    return new utils.Interface(_abi) as ITransactionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ITransaction {
    return new Contract(address, _abi, signerOrProvider) as ITransaction;
  }
}
