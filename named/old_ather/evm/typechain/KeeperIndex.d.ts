/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface KeeperIndexInterface extends ethers.utils.Interface {
  functions: {
    "aetherBonds()": FunctionFragment;
    "aetherDAO()": FunctionFragment;
    "aetherFactory()": FunctionFragment;
    "aetherHUB()": FunctionFragment;
    "aetherID()": FunctionFragment;
    "aetherKeeper()": FunctionFragment;
    "aetherRouter()": FunctionFragment;
    "aetherToken()": FunctionFragment;
    "baseRatio()": FunctionFragment;
    "baseReserves()": FunctionFragment;
    "bondsEval()": FunctionFragment;
    "buybackEval()": FunctionFragment;
    "chainAllocation()": FunctionFragment;
    "chainId()": FunctionFragment;
    "fullRatio()": FunctionFragment;
    "fullReserves()": FunctionFragment;
    "getAetherAddress(uint256)": FunctionFragment;
    "indexEval()": FunctionFragment;
    "nodesEval()": FunctionFragment;
    "targetRatio()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aetherBonds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherDAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherHUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "aetherID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseReserves",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bondsEval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buybackEval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainAllocation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "fullRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fullReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAetherAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "indexEval", values?: undefined): string;
  encodeFunctionData(functionFragment: "nodesEval", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetRatio",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aetherBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherHUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aetherID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bondsEval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buybackEval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fullRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fullReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAetherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "indexEval", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nodesEval", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetRatio",
    data: BytesLike
  ): Result;

  events: {
    "ReservesAdapted(uint256,uint256,uint256,uint256)": EventFragment;
    "TargetUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReservesAdapted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetUpdated"): EventFragment;
}

export type ReservesAdaptedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    RRatio: BigNumber;
    R0xA: BigNumber;
    RNative: BigNumber;
    RTarget: BigNumber;
  }
>;

export type TargetUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    TreasuryTarget: BigNumber;
    TargetTransactions: BigNumber;
  }
>;

export class KeeperIndex extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KeeperIndexInterface;

  functions: {
    aetherBonds(overrides?: CallOverrides): Promise<[string]>;

    aetherDAO(overrides?: CallOverrides): Promise<[string]>;

    aetherFactory(overrides?: CallOverrides): Promise<[string]>;

    aetherHUB(overrides?: CallOverrides): Promise<[string]>;

    aetherID(overrides?: CallOverrides): Promise<[BigNumber]>;

    aetherKeeper(overrides?: CallOverrides): Promise<[string]>;

    aetherRouter(overrides?: CallOverrides): Promise<[string]>;

    aetherToken(overrides?: CallOverrides): Promise<[string]>;

    baseRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    bondsEval(overrides?: CallOverrides): Promise<[BigNumber]>;

    buybackEval(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainAllocation(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    fullRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    fullReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contractAddress: string }>;

    indexEval(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodesEval(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetRatio(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  aetherBonds(overrides?: CallOverrides): Promise<string>;

  aetherDAO(overrides?: CallOverrides): Promise<string>;

  aetherFactory(overrides?: CallOverrides): Promise<string>;

  aetherHUB(overrides?: CallOverrides): Promise<string>;

  aetherID(overrides?: CallOverrides): Promise<BigNumber>;

  aetherKeeper(overrides?: CallOverrides): Promise<string>;

  aetherRouter(overrides?: CallOverrides): Promise<string>;

  aetherToken(overrides?: CallOverrides): Promise<string>;

  baseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  baseReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  bondsEval(overrides?: CallOverrides): Promise<BigNumber>;

  buybackEval(overrides?: CallOverrides): Promise<BigNumber>;

  chainAllocation(overrides?: CallOverrides): Promise<BigNumber>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  fullRatio(overrides?: CallOverrides): Promise<BigNumber>;

  fullReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getAetherAddress(
    contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  indexEval(overrides?: CallOverrides): Promise<BigNumber>;

  nodesEval(overrides?: CallOverrides): Promise<BigNumber>;

  targetRatio(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    aetherBonds(overrides?: CallOverrides): Promise<string>;

    aetherDAO(overrides?: CallOverrides): Promise<string>;

    aetherFactory(overrides?: CallOverrides): Promise<string>;

    aetherHUB(overrides?: CallOverrides): Promise<string>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<string>;

    aetherRouter(overrides?: CallOverrides): Promise<string>;

    aetherToken(overrides?: CallOverrides): Promise<string>;

    baseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    baseReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    bondsEval(overrides?: CallOverrides): Promise<BigNumber>;

    buybackEval(overrides?: CallOverrides): Promise<BigNumber>;

    chainAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    fullRatio(overrides?: CallOverrides): Promise<BigNumber>;

    fullReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    indexEval(overrides?: CallOverrides): Promise<BigNumber>;

    nodesEval(overrides?: CallOverrides): Promise<BigNumber>;

    targetRatio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ReservesAdapted(uint256,uint256,uint256,uint256)"(
      RRatio?: null,
      R0xA?: null,
      RNative?: null,
      RTarget?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        RRatio: BigNumber;
        R0xA: BigNumber;
        RNative: BigNumber;
        RTarget: BigNumber;
      }
    >;

    ReservesAdapted(
      RRatio?: null,
      R0xA?: null,
      RNative?: null,
      RTarget?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        RRatio: BigNumber;
        R0xA: BigNumber;
        RNative: BigNumber;
        RTarget: BigNumber;
      }
    >;

    "TargetUpdated(uint256,uint256)"(
      TreasuryTarget?: null,
      TargetTransactions?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { TreasuryTarget: BigNumber; TargetTransactions: BigNumber }
    >;

    TargetUpdated(
      TreasuryTarget?: null,
      TargetTransactions?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { TreasuryTarget: BigNumber; TargetTransactions: BigNumber }
    >;
  };

  estimateGas: {
    aetherBonds(overrides?: CallOverrides): Promise<BigNumber>;

    aetherDAO(overrides?: CallOverrides): Promise<BigNumber>;

    aetherFactory(overrides?: CallOverrides): Promise<BigNumber>;

    aetherHUB(overrides?: CallOverrides): Promise<BigNumber>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    aetherRouter(overrides?: CallOverrides): Promise<BigNumber>;

    aetherToken(overrides?: CallOverrides): Promise<BigNumber>;

    baseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    baseReserves(overrides?: CallOverrides): Promise<BigNumber>;

    bondsEval(overrides?: CallOverrides): Promise<BigNumber>;

    buybackEval(overrides?: CallOverrides): Promise<BigNumber>;

    chainAllocation(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    fullRatio(overrides?: CallOverrides): Promise<BigNumber>;

    fullReserves(overrides?: CallOverrides): Promise<BigNumber>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexEval(overrides?: CallOverrides): Promise<BigNumber>;

    nodesEval(overrides?: CallOverrides): Promise<BigNumber>;

    targetRatio(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aetherBonds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherHUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondsEval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buybackEval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainAllocation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fullRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fullReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexEval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodesEval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
