#ifndef __ATP__H
	#define OUTPUT 1
	#define PROCESS 1
	#include "utypes.h"
	#include "standard.h"

	#define __AT_DEFINED '@'
	#if __AT_DEFINED!=64
		#define AT_DEFINED 64
	#else
		#define AT_DEFINED __AT_DEFINED
	#endif
	
	#define ATP_FLAG_START 0x1
	#define ATP_FLAG_FS 0x2
	#define ATP_FLAG_IEPS 0x3
	#define ATP_FLAG_ES 0x4
	#define ATP_FLAG_IS 0x5
	#define ATP_FLAG 0x10
	#define ATP_FLAG_C 0x100
	#define ATP_FLAG_INTRPT 16
	#define ATP_FLAG_HANDLER 261
	#define ATP_FLAG_INDEXER 228
	#define ATP_FLAG_PAYLD 273

	#define PLD_MASKED(x)   x&10000000
	#define PLD_SIZE(x)     x&1111111
	#define FRAME_FIN(x)    x&1
	#define FRAME_RSV1(x)   x&01000000
	#define FRAME_RSV2(x)   x&00100000
	#define FRAME_RSV3(x)   x&00010000
	#define FRAME_OPCODE(x) x&00001111

	extern char **environ;
	static char *_h_base="HTTP/1.1";
	static char *_hm_get="GET";
	static char *_hm_post="POST";
	static char *wss_key_h="Sec-WebSocket-Key: ";
	static char *wss_acc_h="Sec-WebSocket-Accept: ";		
	static char *__reph="HTTP/1.1 200 OK\r\nContent-Type: text;\r\nContent-Length: 10\r\n\r\nHello Raed\r\n";
	static char *__upgrade="HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nCache-Control: no-cache\r\nSec-WebSocket-Protocol: @-Protocol\r\n";
	static char *__cwss="258EAFA5-E914-47DA-95CA-C5AB0DC85B11\0";
	char const *hfmt_base="P S R";
	#define HTTP_ACCEPT http_response(200, "OK")
	#define HTTP_SWITCH http_response(101, "Switching Protocols")
	#define HTTP_FORBID http_response(404, "Forbidden")

	enum __http_protomethods {
		__http_request,
		__http_response,
		__http_switch,
	};
	typedef enum __http_protomethods http_proto;

	int __dgetfd(char const *__fpath);
	char const *hashof(unsigned level, void const *to_hash, ulong hash_size);
	char const *fhashof(unsigned level, char const *__tohash);
	ulong str_rwings(char const *string);
	unsigned int pack(uchar *bufin, char const *buffmt, ...);
	void *__arcstp(stp_size __stpsize);
	void __arcpid();
	void __arcfork();
	void __arcsok();
	void *__arcstart(void *__arc);
	int mor(void *args);
	int les(void *args);
	char *str_a4offset(char const *__string, ulong __offset);
	char *str_a4woffset(char const *__string, ulong __offset);
	char *str_b4offset(char const *__string, ulong __offset);
	char *str_b4eoffset(char const *__string, ulong __offset);
	ulong sep_offset(char const *__string, char *__seperator);
	int __stres(char const *__fpath);
	int get_mstat(char const *__fpath, m_stat *mst);
	void log_mstat(m_stat *mst);

	#define str_wsize(x) (str_rwings(x)*sizeof(char))
	#define ustr_wsize(x) (str_rwings(x)*sizeof(uchar))

	#define ATP_SPEC_SIZE (8<<0x3)
	#define ATP_BUFFER_SIZE (ATP_SPEC_SIZE<<0x3)
	#define ATP_PORT "9999" // The common ATP port
	#define ATP_BACKLOG 10 // instances of the same id
	#define __ATP_ENV "="
	#define __ATP_KEY ":"
	#define __ATP_AT "@"
	#define __ATP_AE "Aether(cid)"
	#define __ATP_A4 "localhost"
	#define __ATP_A6 "::1"

	
	#define __D_CLOUD return 0;

	#define __PASS_MAX_C 24
	#define __PASS_MID_C 16
	#define __PASS_MIN_C 8

	#define __read_hash__ ((char const *)hashof(0, "read\0", 4))
	#define __write_hash__ ((char const *)hashof(0, "write\0", 4))
	#define __execute_hash__ ((char const *)hashof(0, "execute\0", 4))
	#define __connect_hash__ ((char const *)hashof(0, "connect\0", 4))
	#define __send_hash__ ((char const *)hashof(0, "send\0", 4))
	#define __listen_hash__ ((char const *)hashof(0, "listen\0", 4))

	#define __vile ((void const *)(__FILE__))
	#define __filename_len (ulong)str_rwings(__FILE__)

	#define d_charms "@charms/"
	#define d_lbb "@lbb"
	#define d_atlbb "@charms/.lbb\0"
	#define __LBB_BASE_LEN str_rwings(__lbb_convdir)
	#define arr_size(x) ((ulong)(sizeof(x)/sizeof(x[0])))
	#define srwings(x) str_rwings(x)
	#define dlbb_rwings 4
	#define dcharms_rwings 8

	#define __p_args(p) ((void *)(&(p.args)))
	#define p_args(p) ((char const *)(p.args))
	#define _p_args_len(p) ((ulong)(str_rwings(p_args(p))))
	#define pst_args(p) ((char const *)(p->args))
	#define pst_args_len(p) ((ulong)str_rwings(pst_args(p)))

	#define __p_pointer(p) ((void *)(&(p.pointer)))
	#define p_pointer(p) ((char const *)((p.pointer)))
	#define _p_pointer_len(p) ((ulong)(str_rwings(p_pointer(p))))

	#define __p_interpreter(p) ((void *)(&(p.interpreter)))
	#define p_interpreter(p) ((char const *)(p.interpreter))
	#define _p_interpreter_len(p) ((ulong)(str_rwings(p_interpreter(p))))

	#define socket_fd(x) (ulong)(x.aip_sockfd)
	#define sock_fd(x) (ulong)(x->aip_sockfd)
	#define socket_len(x) (ulong)(x.aip_socklen)
	#define sock_len(x) (ulong)(x->aip_socklen)
	#define socket_staddr(x) (struct sockaddr *) sock_aip_to_sa(&x)

	#define addr_args(x) ((x->ptr),(x->addr), #x)

    #define len_strze(x) (((ulong)x)*(sizeof(char)))

	static ulong step_c=0;
	static ulong points_c=0;
	static ulong p_pid;
	static ulong c_pid;

	int get_atp_type(char const *proto_call);

	
	#define R_INDEXER(x,y) {\
		if(x==y) { refer_index(x,#x,#x); }\
		else { refer_index(x,y,#x); }\
	}

void *__into__(into_st *into_p);
void *__pia__(pia_st *pia_p);
int __info__(into_st *info);
int __point__(into_st *into_point);
int __pointer__(into_st *into_pointer);
int __atp__(into_st *into_protocol);
int __lbb__(into_st *into_lbb, int arg_count);
int get(into_st *into_var);
int set(into_st *into_var);
int atp(into_st *into_call);
int save(into_st *into_data);
int collect(into_st *into_request);
int dcloud(into_st *into_0xa);

	#define hash_follow(l,...) (char const *)hashof(l, #__VA_ARGS__, str_rwings(#__VA_ARGS__))


#define __protocol__(x) \
	switch(x){\
		case __lbb_none__:\
			return __no_entry__(&into);\
		case __lbb_charms__: \
			return __field__(&into);\
		case __lbb_yeild__:\
			return __lbb__(&into, argc);\
		case __lbb_info__:\
			return __info__(&into);\
		case __lbb_variable__:\
			return __pointer__(&into);\
		case atp_base:\
			return __point__(&into);\
		case atp_return:\
			return prun(&into);\
		case atp_retain:\
			return psave(&into);\
		case atp_retreive:\
			return pcollect(&into);\
		default: \
			return 0;\
	}\


#define _C_TYPES(x) \
    _Generic((x), \
        signed char: "char", \
        unsigned char:"uchar", \
        int:"int", \
        unsigned int:"uns", \
        long int:"ulong", \
        unsigned long int:"ulong", \
        long long int:"tlong", \
        unsigned long long int:"tlong", \
        char *:"string",\
        void *:"pointer",\
        default:"NULL")





	#define __ATP__H 1
#endif

