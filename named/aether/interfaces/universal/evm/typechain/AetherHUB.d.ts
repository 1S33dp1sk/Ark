/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AetherHUBInterface extends ethers.utils.Interface {
  functions: {
    "MASTER_HASH()": FunctionFragment;
    "addTransaction(address,bytes4,bytes)": FunctionFragment;
    "aetherBlockNum()": FunctionFragment;
    "aetherBonds()": FunctionFragment;
    "aetherDAO()": FunctionFragment;
    "aetherFactory()": FunctionFragment;
    "aetherHUB()": FunctionFragment;
    "aetherID()": FunctionFragment;
    "aetherKeeper()": FunctionFragment;
    "aetherRouter()": FunctionFragment;
    "aetherToken()": FunctionFragment;
    "aether_chains()": FunctionFragment;
    "aetheringAddress()": FunctionFragment;
    "callerAAddress()": FunctionFragment;
    "commitTransaction(bytes)": FunctionFragment;
    "decodeABlock(bytes)": FunctionFragment;
    "decodeATransaction(bytes)": FunctionFragment;
    "execBlock(bytes)": FunctionFragment;
    "getABlock(uint256)": FunctionFragment;
    "getATransaction(bytes16)": FunctionFragment;
    "getAetherAddress(uint256)": FunctionFragment;
    "nativeBlockNum()": FunctionFragment;
    "nodeRegistery(address)": FunctionFragment;
    "registerNode(address)": FunctionFragment;
    "stekker()": FunctionFragment;
    "stenner()": FunctionFragment;
    "stepper()": FunctionFragment;
    "submitMasterHash(bytes32)": FunctionFragment;
    "txnStatus(bytes16)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MASTER_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "aetherBlockNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherBonds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherDAO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aetherHUB", values?: undefined): string;
  encodeFunctionData(functionFragment: "aetherID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "aetherKeeper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetherToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aether_chains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aetheringAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callerAAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitTransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeABlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeATransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "execBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getABlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getATransaction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAetherAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeBlockNum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nodeRegistery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNode",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stekker", values?: undefined): string;
  encodeFunctionData(functionFragment: "stenner", values?: undefined): string;
  encodeFunctionData(functionFragment: "stepper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitMasterHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "txnStatus",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MASTER_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherBonds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aetherHUB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "aetherID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "aetherKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetherToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aether_chains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aetheringAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callerAAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeABlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeATransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getABlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getATransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAetherAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeBlockNum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeRegistery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stekker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stenner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stepper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMasterHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txnStatus", data: BytesLike): Result;

  events: {
    "ABlockBind(uint256,bytes32,uint256,bytes20,uint256)": EventFragment;
    "ATxnReceive(bytes16)": EventFragment;
    "ATxnRequest(bytes16,bool)": EventFragment;
    "NodeRegistered(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ABlockBind"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ATxnReceive"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ATxnRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeRegistered"): EventFragment;
}

export type ABlockBindEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber] & {
    ABlockNum: BigNumber;
    ABlockMasterHash: string;
    ABlockTxnCount: BigNumber;
    ABlockAethering: string;
    NBlockNum: BigNumber;
  }
>;

export type ATxnReceiveEvent = TypedEvent<[string] & { ATxnHash: string }>;

export type ATxnRequestEvent = TypedEvent<
  [string, boolean] & { ATxnHash: string; ATxnResult: boolean }
>;

export type NodeRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    ANodeAddress: string;
    ANodePos: BigNumber;
    ANodesPtr: BigNumber;
  }
>;

export class AetherHUB extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AetherHUBInterface;

  functions: {
    MASTER_HASH(overrides?: CallOverrides): Promise<[string]>;

    addTransaction(
      aCaller: string,
      aSelector: BytesLike,
      aArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    aetherBlockNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    aetherBonds(overrides?: CallOverrides): Promise<[string]>;

    aetherDAO(overrides?: CallOverrides): Promise<[string]>;

    aetherFactory(overrides?: CallOverrides): Promise<[string]>;

    aetherHUB(overrides?: CallOverrides): Promise<[string]>;

    aetherID(overrides?: CallOverrides): Promise<[BigNumber]>;

    aetherKeeper(overrides?: CallOverrides): Promise<[string]>;

    aetherRouter(overrides?: CallOverrides): Promise<[string]>;

    aetherToken(overrides?: CallOverrides): Promise<[string]>;

    aether_chains(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    aetheringAddress(overrides?: CallOverrides): Promise<[string]>;

    callerAAddress(overrides?: CallOverrides): Promise<[string]>;

    commitTransaction(
      aTxn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decodeABlock(
      aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string] & {
          _masterHash: string;
          _txnCount: BigNumber;
          _aetheringAddress: string;
        },
        string[]
      ] & {
        aetherBlock: [string, BigNumber, string] & {
          _masterHash: string;
          _txnCount: BigNumber;
          _aetheringAddress: string;
        };
        blockTxnHashes: string[];
      }
    >;

    decodeATransaction(
      aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string, string] & {
          _from: string;
          _to: string;
          _select: string;
          _args: string;
        }
      ] & {
        aetherTxn: [string, string, string, string] & {
          _from: string;
          _to: string;
          _select: string;
          _args: string;
        };
      }
    >;

    execBlock(
      aBlock: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getABlock(
      ablock_num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        aBlockMasterHash: string;
        aBlockTxnCount: BigNumber;
        aBlockAetheringAddr: string;
      }
    >;

    getATransaction(
      atxn_ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string, string, string, string] & {
        txn_cids: BigNumber[];
        txn_from: string;
        txn_to: string;
        txn_selector: string;
        txn_args: string;
      }
    >;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { contractAddress: string }>;

    nativeBlockNum(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodeRegistery(
      nodeAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    registerNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stekker(overrides?: CallOverrides): Promise<[boolean]>;

    stenner(overrides?: CallOverrides): Promise<[boolean]>;

    stepper(overrides?: CallOverrides): Promise<[boolean]>;

    submitMasterHash(
      masterHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    txnStatus(
      atxn_hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MASTER_HASH(overrides?: CallOverrides): Promise<string>;

  addTransaction(
    aCaller: string,
    aSelector: BytesLike,
    aArgs: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  aetherBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

  aetherBonds(overrides?: CallOverrides): Promise<string>;

  aetherDAO(overrides?: CallOverrides): Promise<string>;

  aetherFactory(overrides?: CallOverrides): Promise<string>;

  aetherHUB(overrides?: CallOverrides): Promise<string>;

  aetherID(overrides?: CallOverrides): Promise<BigNumber>;

  aetherKeeper(overrides?: CallOverrides): Promise<string>;

  aetherRouter(overrides?: CallOverrides): Promise<string>;

  aetherToken(overrides?: CallOverrides): Promise<string>;

  aether_chains(overrides?: CallOverrides): Promise<BigNumber[]>;

  aetheringAddress(overrides?: CallOverrides): Promise<string>;

  callerAAddress(overrides?: CallOverrides): Promise<string>;

  commitTransaction(
    aTxn: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decodeABlock(
    aBlock: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [string, BigNumber, string] & {
        _masterHash: string;
        _txnCount: BigNumber;
        _aetheringAddress: string;
      },
      string[]
    ] & {
      aetherBlock: [string, BigNumber, string] & {
        _masterHash: string;
        _txnCount: BigNumber;
        _aetheringAddress: string;
      };
      blockTxnHashes: string[];
    }
  >;

  decodeATransaction(
    aTxn: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string] & {
      _from: string;
      _to: string;
      _select: string;
      _args: string;
    }
  >;

  execBlock(
    aBlock: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getABlock(
    ablock_num: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      aBlockMasterHash: string;
      aBlockTxnCount: BigNumber;
      aBlockAetheringAddr: string;
    }
  >;

  getATransaction(
    atxn_ref: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], string, string, string, string] & {
      txn_cids: BigNumber[];
      txn_from: string;
      txn_to: string;
      txn_selector: string;
      txn_args: string;
    }
  >;

  getAetherAddress(
    contractId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  nativeBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

  nodeRegistery(nodeAddr: string, overrides?: CallOverrides): Promise<boolean>;

  registerNode(
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stekker(overrides?: CallOverrides): Promise<boolean>;

  stenner(overrides?: CallOverrides): Promise<boolean>;

  stepper(overrides?: CallOverrides): Promise<boolean>;

  submitMasterHash(
    masterHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  txnStatus(atxn_hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    MASTER_HASH(overrides?: CallOverrides): Promise<string>;

    addTransaction(
      aCaller: string,
      aSelector: BytesLike,
      aArgs: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    aetherBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    aetherBonds(overrides?: CallOverrides): Promise<string>;

    aetherDAO(overrides?: CallOverrides): Promise<string>;

    aetherFactory(overrides?: CallOverrides): Promise<string>;

    aetherHUB(overrides?: CallOverrides): Promise<string>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<string>;

    aetherRouter(overrides?: CallOverrides): Promise<string>;

    aetherToken(overrides?: CallOverrides): Promise<string>;

    aether_chains(overrides?: CallOverrides): Promise<BigNumber[]>;

    aetheringAddress(overrides?: CallOverrides): Promise<string>;

    callerAAddress(overrides?: CallOverrides): Promise<string>;

    commitTransaction(
      aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decodeABlock(
      aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, string] & {
          _masterHash: string;
          _txnCount: BigNumber;
          _aetheringAddress: string;
        },
        string[]
      ] & {
        aetherBlock: [string, BigNumber, string] & {
          _masterHash: string;
          _txnCount: BigNumber;
          _aetheringAddress: string;
        };
        blockTxnHashes: string[];
      }
    >;

    decodeATransaction(
      aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string] & {
        _from: string;
        _to: string;
        _select: string;
        _args: string;
      }
    >;

    execBlock(aBlock: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    getABlock(
      ablock_num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        aBlockMasterHash: string;
        aBlockTxnCount: BigNumber;
        aBlockAetheringAddr: string;
      }
    >;

    getATransaction(
      atxn_ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], string, string, string, string] & {
        txn_cids: BigNumber[];
        txn_from: string;
        txn_to: string;
        txn_selector: string;
        txn_args: string;
      }
    >;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    nativeBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    nodeRegistery(
      nodeAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stekker(overrides?: CallOverrides): Promise<boolean>;

    stenner(overrides?: CallOverrides): Promise<boolean>;

    stepper(overrides?: CallOverrides): Promise<boolean>;

    submitMasterHash(
      masterHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    txnStatus(
      atxn_hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "ABlockBind(uint256,bytes32,uint256,bytes20,uint256)"(
      ABlockNum?: null,
      ABlockMasterHash?: null,
      ABlockTxnCount?: null,
      ABlockAethering?: null,
      NBlockNum?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        ABlockNum: BigNumber;
        ABlockMasterHash: string;
        ABlockTxnCount: BigNumber;
        ABlockAethering: string;
        NBlockNum: BigNumber;
      }
    >;

    ABlockBind(
      ABlockNum?: null,
      ABlockMasterHash?: null,
      ABlockTxnCount?: null,
      ABlockAethering?: null,
      NBlockNum?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber],
      {
        ABlockNum: BigNumber;
        ABlockMasterHash: string;
        ABlockTxnCount: BigNumber;
        ABlockAethering: string;
        NBlockNum: BigNumber;
      }
    >;

    "ATxnReceive(bytes16)"(
      ATxnHash?: null
    ): TypedEventFilter<[string], { ATxnHash: string }>;

    ATxnReceive(
      ATxnHash?: null
    ): TypedEventFilter<[string], { ATxnHash: string }>;

    "ATxnRequest(bytes16,bool)"(
      ATxnHash?: null,
      ATxnResult?: null
    ): TypedEventFilter<
      [string, boolean],
      { ATxnHash: string; ATxnResult: boolean }
    >;

    ATxnRequest(
      ATxnHash?: null,
      ATxnResult?: null
    ): TypedEventFilter<
      [string, boolean],
      { ATxnHash: string; ATxnResult: boolean }
    >;

    "NodeRegistered(address,uint256,uint256)"(
      ANodeAddress?: null,
      ANodePos?: null,
      ANodesPtr?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ANodeAddress: string; ANodePos: BigNumber; ANodesPtr: BigNumber }
    >;

    NodeRegistered(
      ANodeAddress?: null,
      ANodePos?: null,
      ANodesPtr?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { ANodeAddress: string; ANodePos: BigNumber; ANodesPtr: BigNumber }
    >;
  };

  estimateGas: {
    MASTER_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    addTransaction(
      aCaller: string,
      aSelector: BytesLike,
      aArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    aetherBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    aetherBonds(overrides?: CallOverrides): Promise<BigNumber>;

    aetherDAO(overrides?: CallOverrides): Promise<BigNumber>;

    aetherFactory(overrides?: CallOverrides): Promise<BigNumber>;

    aetherHUB(overrides?: CallOverrides): Promise<BigNumber>;

    aetherID(overrides?: CallOverrides): Promise<BigNumber>;

    aetherKeeper(overrides?: CallOverrides): Promise<BigNumber>;

    aetherRouter(overrides?: CallOverrides): Promise<BigNumber>;

    aetherToken(overrides?: CallOverrides): Promise<BigNumber>;

    aether_chains(overrides?: CallOverrides): Promise<BigNumber>;

    aetheringAddress(overrides?: CallOverrides): Promise<BigNumber>;

    callerAAddress(overrides?: CallOverrides): Promise<BigNumber>;

    commitTransaction(
      aTxn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decodeABlock(
      aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeATransaction(
      aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execBlock(
      aBlock: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getABlock(
      ablock_num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getATransaction(
      atxn_ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeBlockNum(overrides?: CallOverrides): Promise<BigNumber>;

    nodeRegistery(
      nodeAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stekker(overrides?: CallOverrides): Promise<BigNumber>;

    stenner(overrides?: CallOverrides): Promise<BigNumber>;

    stepper(overrides?: CallOverrides): Promise<BigNumber>;

    submitMasterHash(
      masterHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    txnStatus(
      atxn_hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MASTER_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTransaction(
      aCaller: string,
      aSelector: BytesLike,
      aArgs: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    aetherBlockNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherBonds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherDAO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherHUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherKeeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aether_chains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aetheringAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callerAAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitTransaction(
      aTxn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decodeABlock(
      aBlock: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeATransaction(
      aTxn: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execBlock(
      aBlock: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getABlock(
      ablock_num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getATransaction(
      atxn_ref: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAetherAddress(
      contractId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeBlockNum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodeRegistery(
      nodeAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stekker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stenner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stepper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitMasterHash(
      masterHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    txnStatus(
      atxn_hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
